{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport * as ImageManipulator from 'expo-image-manipulator';\nvar _Dimensions$get = Dimensions.get('window'),\n  DEVICE_HEIGHT = _Dimensions$get.height,\n  DEVICE_WIDTH = _Dimensions$get.width;\nexport var BITMAP_DIMENSION = 224;\nexport var cropPicture = function cropPicture(imageData, maskDimension) {\n  var uri, width, height, cropWidth, cropHeight, actions, saveOptions;\n  return _regeneratorRuntime.async(function cropPicture$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          uri = imageData.uri, width = imageData.width, height = imageData.height;\n          cropWidth = maskDimension * (width / DEVICE_WIDTH);\n          cropHeight = maskDimension * (height / DEVICE_HEIGHT);\n          actions = [{\n            crop: {\n              originX: width / 2 - cropWidth / 2,\n              originY: height / 2 - cropHeight / 2,\n              width: cropWidth,\n              height: cropHeight\n            }\n          }, {\n            resize: {\n              width: BITMAP_DIMENSION,\n              height: BITMAP_DIMENSION\n            }\n          }];\n          saveOptions = {\n            compress: 1,\n            format: ImageManipulator.SaveFormat.JPEG,\n            base64: true\n          };\n          _context.next = 8;\n          return _regeneratorRuntime.awrap(ImageManipulator.manipulateAsync(uri, actions, saveOptions));\n        case 8:\n          return _context.abrupt(\"return\", _context.sent);\n        case 11:\n          _context.prev = 11;\n          _context.t0 = _context[\"catch\"](0);\n          console.log('Could not crop & resize photo', _context.t0);\n        case 14:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, [[0, 11]], Promise);\n};","map":{"version":3,"names":["ImageManipulator","_Dimensions$get","Dimensions","get","DEVICE_HEIGHT","height","DEVICE_WIDTH","width","BITMAP_DIMENSION","cropPicture","imageData","maskDimension","uri","cropWidth","cropHeight","actions","saveOptions","_regeneratorRuntime","async","cropPicture$","_context","prev","next","crop","originX","originY","resize","compress","format","SaveFormat","JPEG","base64","awrap","manipulateAsync","abrupt","sent","t0","console","log","stop","Promise"],"sources":["/Users/rihong/Documents/Github/SortifyAI/helpers/image-helper.js"],"sourcesContent":["import {Dimensions} from 'react-native';\r\nimport * as ImageManipulator from 'expo-image-manipulator';\r\n\r\nconst {height: DEVICE_HEIGHT, width: DEVICE_WIDTH} = Dimensions.get('window');\r\n\r\n// got the dimension from the trained data of the *Teachable Machine*; pixel resolution conversion (8x)\r\nexport const BITMAP_DIMENSION = 224;\r\n\r\nexport const cropPicture = async (imageData, maskDimension) => {\r\n  try {\r\n    const {uri, width, height} = imageData;\r\n    const cropWidth = maskDimension * (width / DEVICE_WIDTH);\r\n    const cropHeight = maskDimension * (height / DEVICE_HEIGHT);\r\n    const actions = [\r\n      {\r\n        crop: {\r\n          originX: width / 2 - cropWidth / 2,\r\n          originY: height / 2 - cropHeight / 2,\r\n          width: cropWidth,\r\n          height: cropHeight,\r\n        },\r\n      },\r\n      {\r\n        resize: {\r\n          width: BITMAP_DIMENSION,\r\n          height: BITMAP_DIMENSION,\r\n        },\r\n      },\r\n    ];\r\n    const saveOptions = {\r\n      compress: 1,\r\n      format: ImageManipulator.SaveFormat.JPEG,\r\n      base64: true,\r\n    };\r\n    return await ImageManipulator.manipulateAsync(uri, actions, saveOptions);\r\n  } catch (error) {\r\n    console.log('Could not crop & resize photo', error);\r\n  }\r\n};"],"mappings":";;AACA,OAAO,KAAKA,gBAAgB,MAAM,wBAAwB;AAAC,IAAAC,eAAA,GAENC,UAAU,CAACC,GAAG,CAAC,QAAQ,CAAC;EAA9DC,aAAa,GAAAH,eAAA,CAArBI,MAAM;EAAwBC,YAAY,GAAAL,eAAA,CAAnBM,KAAK;AAGnC,OAAO,IAAMC,gBAAgB,GAAG,GAAG;AAEnC,OAAO,IAAMC,WAAW,GAAG,SAAdA,WAAWA,CAAUC,SAAS,EAAEC,aAAa;EAAA,IAAAC,GAAA,EAAAL,KAAA,EAAAF,MAAA,EAAAQ,SAAA,EAAAC,UAAA,EAAAC,OAAA,EAAAC,WAAA;EAAA,OAAAC,mBAAA,CAAAC,KAAA,UAAAC,aAAAC,QAAA;IAAA;MAAA,QAAAA,QAAA,CAAAC,IAAA,GAAAD,QAAA,CAAAE,IAAA;QAAA;UAAAF,QAAA,CAAAC,IAAA;UAE/CT,GAAG,GAAmBF,SAAS,CAA/BE,GAAG,EAAEL,KAAK,GAAYG,SAAS,CAA1BH,KAAK,EAAEF,MAAM,GAAIK,SAAS,CAAnBL,MAAM;UACnBQ,SAAS,GAAGF,aAAa,IAAIJ,KAAK,GAAGD,YAAY,CAAC;UAClDQ,UAAU,GAAGH,aAAa,IAAIN,MAAM,GAAGD,aAAa,CAAC;UACrDW,OAAO,GAAG,CACd;YACEQ,IAAI,EAAE;cACJC,OAAO,EAAEjB,KAAK,GAAG,CAAC,GAAGM,SAAS,GAAG,CAAC;cAClCY,OAAO,EAAEpB,MAAM,GAAG,CAAC,GAAGS,UAAU,GAAG,CAAC;cACpCP,KAAK,EAAEM,SAAS;cAChBR,MAAM,EAAES;YACV;UACF,CAAC,EACD;YACEY,MAAM,EAAE;cACNnB,KAAK,EAAEC,gBAAgB;cACvBH,MAAM,EAAEG;YACV;UACF,CAAC,CACF;UACKQ,WAAW,GAAG;YAClBW,QAAQ,EAAE,CAAC;YACXC,MAAM,EAAE5B,gBAAgB,CAAC6B,UAAU,CAACC,IAAI;YACxCC,MAAM,EAAE;UACV,CAAC;UAAAX,QAAA,CAAAE,IAAA;UAAA,OAAAL,mBAAA,CAAAe,KAAA,CACYhC,gBAAgB,CAACiC,eAAe,CAACrB,GAAG,EAAEG,OAAO,EAAEC,WAAW,CAAC;QAAA;UAAA,OAAAI,QAAA,CAAAc,MAAA,WAAAd,QAAA,CAAAe,IAAA;QAAA;UAAAf,QAAA,CAAAC,IAAA;UAAAD,QAAA,CAAAgB,EAAA,GAAAhB,QAAA;UAExEiB,OAAO,CAACC,GAAG,CAAC,+BAA+B,EAAAlB,QAAA,CAAAgB,EAAO,CAAC;QAAC;QAAA;UAAA,OAAAhB,QAAA,CAAAmB,IAAA;MAAA;IAAA;EAAA,0BAAAC,OAAA;AAAA,CAEvD"},"metadata":{},"sourceType":"module","externalDependencies":[]}