{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\nvar _deepAssign = _interopRequireDefault(require(\"deep-assign\"));\nvar mergeLocalStorageItem = function mergeLocalStorageItem(key, value) {\n  var oldValue = window.localStorage.getItem(key);\n  var oldObject = JSON.parse(oldValue);\n  var newObject = JSON.parse(value);\n  var nextValue = JSON.stringify((0, _deepAssign.default)({}, oldObject, newObject));\n  window.localStorage.setItem(key, nextValue);\n};\nvar createPromise = function createPromise(getValue, callback) {\n  return new Promise(function (resolve, reject) {\n    try {\n      var value = getValue();\n      if (callback) {\n        callback(null, value);\n      }\n      resolve(value);\n    } catch (err) {\n      if (callback) {\n        callback(err);\n      }\n      reject(err);\n    }\n  });\n};\nvar createPromiseAll = function createPromiseAll(promises, callback, processResult) {\n  return Promise.all(promises).then(function (result) {\n    var value = processResult ? processResult(result) : null;\n    callback && callback(null, value);\n    return Promise.resolve(value);\n  }, function (errors) {\n    callback && callback(errors);\n    return Promise.reject(errors);\n  });\n};\nvar AsyncStorage = function () {\n  function AsyncStorage() {\n    (0, _classCallCheck2.default)(this, AsyncStorage);\n  }\n  (0, _createClass2.default)(AsyncStorage, null, [{\n    key: \"getItem\",\n    value: function getItem(key, callback) {\n      return createPromise(function () {\n        return window.localStorage.getItem(key);\n      }, callback);\n    }\n  }, {\n    key: \"setItem\",\n    value: function setItem(key, value, callback) {\n      return createPromise(function () {\n        window.localStorage.setItem(key, value);\n      }, callback);\n    }\n  }, {\n    key: \"removeItem\",\n    value: function removeItem(key, callback) {\n      return createPromise(function () {\n        return window.localStorage.removeItem(key);\n      }, callback);\n    }\n  }, {\n    key: \"mergeItem\",\n    value: function mergeItem(key, value, callback) {\n      return createPromise(function () {\n        mergeLocalStorageItem(key, value);\n      }, callback);\n    }\n  }, {\n    key: \"clear\",\n    value: function clear(callback) {\n      return createPromise(function () {\n        window.localStorage.clear();\n      }, callback);\n    }\n  }, {\n    key: \"getAllKeys\",\n    value: function getAllKeys(callback) {\n      return createPromise(function () {\n        var numberOfKeys = window.localStorage.length;\n        var keys = [];\n        for (var i = 0; i < numberOfKeys; i += 1) {\n          var key = window.localStorage.key(i);\n          keys.push(key);\n        }\n        return keys;\n      }, callback);\n    }\n  }, {\n    key: \"flushGetRequests\",\n    value: function flushGetRequests() {}\n  }, {\n    key: \"multiGet\",\n    value: function multiGet(keys, callback) {\n      var promises = keys.map(function (key) {\n        return AsyncStorage.getItem(key);\n      });\n      var processResult = function processResult(result) {\n        return result.map(function (value, i) {\n          return [keys[i], value];\n        });\n      };\n      return createPromiseAll(promises, callback, processResult);\n    }\n  }, {\n    key: \"multiSet\",\n    value: function multiSet(keyValuePairs, callback) {\n      var promises = keyValuePairs.map(function (item) {\n        return AsyncStorage.setItem(item[0], item[1]);\n      });\n      return createPromiseAll(promises, callback);\n    }\n  }, {\n    key: \"multiRemove\",\n    value: function multiRemove(keys, callback) {\n      var promises = keys.map(function (key) {\n        return AsyncStorage.removeItem(key);\n      });\n      return createPromiseAll(promises, callback);\n    }\n  }, {\n    key: \"multiMerge\",\n    value: function multiMerge(keyValuePairs, callback) {\n      var promises = keyValuePairs.map(function (item) {\n        return AsyncStorage.mergeItem(item[0], item[1]);\n      });\n      return createPromiseAll(promises, callback);\n    }\n  }]);\n  return AsyncStorage;\n}();\nexports.default = AsyncStorage;","map":{"version":3,"names":["_deepAssign","_interopRequireDefault","require","mergeLocalStorageItem","key","value","oldValue","window","localStorage","getItem","oldObject","JSON","parse","newObject","nextValue","stringify","default","setItem","createPromise","getValue","callback","Promise","resolve","reject","err","createPromiseAll","promises","processResult","all","then","result","errors","AsyncStorage","removeItem","clear","numberOfKeys","length","keys","i","push","map","keyValuePairs","item","mergeItem"],"sources":["/Users/rihong/Documents/Github/SortifyAI/node_modules/@react-native-community/async-storage/lib/module/AsyncStorage.js"],"sourcesContent":["/**\n * Copyright (c) Nicolas Gallagher.\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport merge from 'deep-assign';\n\nconst mergeLocalStorageItem = (key, value) => {\n  const oldValue = window.localStorage.getItem(key);\n  const oldObject = JSON.parse(oldValue);\n  const newObject = JSON.parse(value);\n  const nextValue = JSON.stringify(merge({}, oldObject, newObject));\n  window.localStorage.setItem(key, nextValue);\n};\n\nconst createPromise = (getValue, callback): Promise<*> => {\n  return new Promise((resolve, reject) => {\n    try {\n      const value = getValue();\n      if (callback) {\n        callback(null, value);\n      }\n      resolve(value);\n    } catch (err) {\n      if (callback) {\n        callback(err);\n      }\n      reject(err);\n    }\n  });\n};\n\nconst createPromiseAll = (promises, callback, processResult): Promise<*> => {\n  return Promise.all(promises).then(\n    result => {\n      const value = processResult ? processResult(result) : null;\n      callback && callback(null, value);\n      return Promise.resolve(value);\n    },\n    errors => {\n      callback && callback(errors);\n      return Promise.reject(errors);\n    }\n  );\n};\n\nexport default class AsyncStorage {\n\n  /**\n   * Fetches `key` value.\n   */\n  static getItem(key: string, callback?: Function): Promise<*> {\n    return createPromise(() => {\n      return window.localStorage.getItem(key);\n    }, callback);\n  }\n\n  /**\n   * Sets `value` for `key`.\n   */\n  static setItem(key: string, value: string, callback?: Function): Promise<*> {\n    return createPromise(() => {\n      window.localStorage.setItem(key, value);\n    }, callback);\n  }\n\n  /**\n   * Removes a `key`\n   */\n  static removeItem(key: string, callback?: Function): Promise<*> {\n    return createPromise(() => {\n      return window.localStorage.removeItem(key);\n    }, callback);\n  }\n\n  /**\n   * Merges existing value with input value, assuming they are stringified JSON.\n   */\n  static mergeItem(key: string, value: string, callback?: Function): Promise<*> {\n    return createPromise(() => {\n      mergeLocalStorageItem(key, value);\n    }, callback);\n  }\n\n  /**\n   * Erases *all* AsyncStorage for the domain.\n   */\n  static clear(callback?: Function): Promise<*> {\n    return createPromise(() => {\n      window.localStorage.clear();\n    }, callback);\n  }\n\n  /**\n   * Gets *all* keys known to the app, for all callers, libraries, etc.\n   */\n  static getAllKeys(callback?: Function): Promise<*> {\n    return createPromise(() => {\n      const numberOfKeys = window.localStorage.length;\n      const keys = [];\n      for (let i = 0; i < numberOfKeys; i += 1) {\n        const key = window.localStorage.key(i);\n        keys.push(key);\n      }\n      return keys;\n    }, callback);\n  }\n\n  /**\n   * (stub) Flushes any pending requests using a single batch call to get the data.\n   */\n  static flushGetRequests() {}\n\n  /**\n   * multiGet resolves to an array of key-value pair arrays that matches the\n   * input format of multiSet.\n   *\n   *   multiGet(['k1', 'k2']) -> [['k1', 'val1'], ['k2', 'val2']]\n   */\n  static multiGet(keys: Array<string>, callback?: Function): Promise<*> {\n    const promises = keys.map(key => AsyncStorage.getItem(key));\n    const processResult = result => result.map((value, i) => [keys[i], value]);\n    return createPromiseAll(promises, callback, processResult);\n  }\n\n  /**\n   * Takes an array of key-value array pairs.\n   *   multiSet([['k1', 'val1'], ['k2', 'val2']])\n   */\n  static multiSet(keyValuePairs: Array<Array<string>>, callback?: Function): Promise<*> {\n    const promises = keyValuePairs.map(item => AsyncStorage.setItem(item[0], item[1]));\n    return createPromiseAll(promises, callback);\n  }\n\n  /**\n   * Delete all the keys in the `keys` array.\n   */\n  static multiRemove(keys: Array<string>, callback?: Function): Promise<*> {\n    const promises = keys.map(key => AsyncStorage.removeItem(key));\n    return createPromiseAll(promises, callback);\n  }\n\n  /**\n   * Takes an array of key-value array pairs and merges them with existing\n   * values, assuming they are stringified JSON.\n   *\n   *   multiMerge([['k1', 'val1'], ['k2', 'val2']])\n   */\n  static multiMerge(keyValuePairs: Array<Array<string>>, callback?: Function): Promise<*> {\n    const promises = keyValuePairs.map(item => AsyncStorage.mergeItem(item[0], item[1]));\n    return createPromiseAll(promises, callback);\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}