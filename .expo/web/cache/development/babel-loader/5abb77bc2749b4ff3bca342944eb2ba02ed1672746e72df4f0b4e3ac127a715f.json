{"ast":null,"code":"export var Base64Binary = {\n  _keyStr: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=',\n  decodeArrayBuffer: function decodeArrayBuffer(input) {\n    var bytes = input.length / 4 * 3;\n    var ab = new ArrayBuffer(bytes);\n    this.decode(input, ab);\n    return ab;\n  },\n  removePaddingChars: function removePaddingChars(input) {\n    var lkey = this._keyStr.indexOf(input.charAt(input.length - 1));\n    if (lkey === 64) {\n      return input.substring(0, input.length - 1);\n    }\n    return input;\n  },\n  decode: function decode(input, arrayBuffer) {\n    input = this.removePaddingChars(input);\n    input = this.removePaddingChars(input);\n    var bytes = parseInt(input.length / 4 * 3, 10);\n    var uarray;\n    var chr1, chr2, chr3;\n    var enc1, enc2, enc3, enc4;\n    var i = 0;\n    var j = 0;\n    if (arrayBuffer) {\n      uarray = new Uint8Array(arrayBuffer);\n    } else {\n      uarray = new Uint8Array(bytes);\n    }\n    input = input.replace(/[^A-Za-z0-9\\+\\/\\=]/g, '');\n    for (i = 0; i < bytes; i += 3) {\n      enc1 = this._keyStr.indexOf(input.charAt(j++));\n      enc2 = this._keyStr.indexOf(input.charAt(j++));\n      enc3 = this._keyStr.indexOf(input.charAt(j++));\n      enc4 = this._keyStr.indexOf(input.charAt(j++));\n      chr1 = enc1 << 2 | enc2 >> 4;\n      chr2 = (enc2 & 15) << 4 | enc3 >> 2;\n      chr3 = (enc3 & 3) << 6 | enc4;\n      uarray[i] = chr1;\n      if (enc3 !== 64) {\n        uarray[i + 1] = chr2;\n      }\n      if (enc4 !== 64) {\n        uarray[i + 2] = chr3;\n      }\n    }\n    return uarray;\n  }\n};","map":{"version":3,"names":["Base64Binary","_keyStr","decodeArrayBuffer","input","bytes","length","ab","ArrayBuffer","decode","removePaddingChars","lkey","indexOf","charAt","substring","arrayBuffer","parseInt","uarray","chr1","chr2","chr3","enc1","enc2","enc3","enc4","i","j","Uint8Array","replace"],"sources":["/Users/rihong/Documents/Github/SortifyAI/utils/utils.js"],"sourcesContent":["/* eslint-disable no-bitwise */\n/*\nCopyright (c) 2011, Daniel Guerrero\nAll rights reserved.\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n    * Redistributions of source code must retain the above copyright\n      notice, this list of conditions and the following disclaimer.\n    * Redistributions in binary form must reproduce the above copyright\n      notice, this list of conditions and the following disclaimer in the\n      documentation and/or other materials provided with the distribution.\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL DANIEL GUERRERO BE LIABLE FOR ANY\nDIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\nLOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\nON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\n/**\n * Uses the new array typed in javascript to binary base64 encode/decode\n * at the moment just decodes a binary base64 encoded\n * into either an ArrayBuffer (decodeArrayBuffer)\n * or into an Uint8Array (decode)\n *\n * References:\n * https://developer.mozilla.org/en/JavaScript_typed_arrays/ArrayBuffer\n * https://developer.mozilla.org/en/JavaScript_typed_arrays/Uint8Array\n */\n\nexport const Base64Binary = {\n  _keyStr: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=',\n\n  /* will return a  Uint8Array type */\n  decodeArrayBuffer: function (input) {\n    var bytes = (input.length / 4) * 3;\n    var ab = new ArrayBuffer(bytes);\n    this.decode(input, ab);\n\n    return ab;\n  },\n\n  removePaddingChars: function (input) {\n    var lkey = this._keyStr.indexOf(input.charAt(input.length - 1));\n    if (lkey === 64) {\n      return input.substring(0, input.length - 1);\n    }\n    return input;\n  },\n\n  decode: function (input, arrayBuffer) {\n    //get last chars to see if are valid\n    input = this.removePaddingChars(input);\n    input = this.removePaddingChars(input);\n\n    var bytes = parseInt((input.length / 4) * 3, 10);\n\n    var uarray;\n    var chr1, chr2, chr3;\n    var enc1, enc2, enc3, enc4;\n    var i = 0;\n    var j = 0;\n\n    if (arrayBuffer) {\n      uarray = new Uint8Array(arrayBuffer);\n    } else {\n      uarray = new Uint8Array(bytes);\n    }\n\n    input = input.replace(/[^A-Za-z0-9\\+\\/\\=]/g, '');\n\n    for (i = 0; i < bytes; i += 3) {\n      //get the 3 octects in 4 ascii chars\n      enc1 = this._keyStr.indexOf(input.charAt(j++));\n      enc2 = this._keyStr.indexOf(input.charAt(j++));\n      enc3 = this._keyStr.indexOf(input.charAt(j++));\n      enc4 = this._keyStr.indexOf(input.charAt(j++));\n\n      chr1 = (enc1 << 2) | (enc2 >> 4);\n      chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);\n      chr3 = ((enc3 & 3) << 6) | enc4;\n\n      uarray[i] = chr1;\n      if (enc3 !== 64) {\n        uarray[i + 1] = chr2;\n      }\n      if (enc4 !== 64) {\n        uarray[i + 2] = chr3;\n      }\n    }\n\n    return uarray;\n  },\n};"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}