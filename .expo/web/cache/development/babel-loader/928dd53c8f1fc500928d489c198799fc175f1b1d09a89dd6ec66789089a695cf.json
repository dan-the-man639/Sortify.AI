{"ast":null,"code":"'use strict';\nvar _defineProperty = require(\"@babel/runtime/helpers/defineProperty\");\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nvar RNFSManager = require('react-native').NativeModules.RNFSManager;\nvar NativeEventEmitter = require('react-native').NativeEventEmitter;\nvar RNFS_NativeEventEmitter = new NativeEventEmitter(RNFSManager);\nvar base64 = require('base-64');\nvar utf8 = require('utf8');\nvar isIOS = require('react-native').Platform.OS === 'ios';\nvar RNFSFileTypeRegular = RNFSManager.RNFSFileTypeRegular;\nvar RNFSFileTypeDirectory = RNFSManager.RNFSFileTypeDirectory;\nvar jobId = 0;\nvar getJobId = function getJobId() {\n  jobId += 1;\n  return jobId;\n};\nvar normalizeFilePath = function normalizeFilePath(path) {\n  return path.startsWith('file://') ? path.slice(7) : path;\n};\nfunction readFileGeneric(filepath, encodingOrOptions, command) {\n  var options = {\n    encoding: 'utf8'\n  };\n  if (encodingOrOptions) {\n    if (typeof encodingOrOptions === 'string') {\n      options.encoding = encodingOrOptions;\n    } else if (typeof encodingOrOptions === 'object') {\n      options = encodingOrOptions;\n    }\n  }\n  return command(normalizeFilePath(filepath)).then(function (b64) {\n    var contents;\n    if (options.encoding === 'utf8') {\n      contents = utf8.decode(base64.decode(b64));\n    } else if (options.encoding === 'ascii') {\n      contents = base64.decode(b64);\n    } else if (options.encoding === 'base64') {\n      contents = b64;\n    } else {\n      throw new Error('Invalid encoding type \"' + String(options.encoding) + '\"');\n    }\n    return contents;\n  });\n}\nfunction readDirGeneric(dirpath, command) {\n  return command(normalizeFilePath(dirpath)).then(function (files) {\n    return files.map(function (file) {\n      return {\n        ctime: file.ctime && new Date(file.ctime * 1000) || null,\n        mtime: file.mtime && new Date(file.mtime * 1000) || null,\n        name: file.name,\n        path: file.path,\n        size: file.size,\n        isFile: function isFile() {\n          return file.type === RNFSFileTypeRegular;\n        },\n        isDirectory: function isDirectory() {\n          return file.type === RNFSFileTypeDirectory;\n        }\n      };\n    });\n  });\n}\nvar RNFS = {\n  mkdir: function mkdir(filepath) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return RNFSManager.mkdir(normalizeFilePath(filepath), options).then(function () {\n      return void 0;\n    });\n  },\n  moveFile: function moveFile(filepath, destPath) {\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    return RNFSManager.moveFile(normalizeFilePath(filepath), normalizeFilePath(destPath), options).then(function () {\n      return void 0;\n    });\n  },\n  copyFile: function copyFile(filepath, destPath) {\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    return RNFSManager.copyFile(normalizeFilePath(filepath), normalizeFilePath(destPath), options).then(function () {\n      return void 0;\n    });\n  },\n  pathForBundle: function pathForBundle(bundleNamed) {\n    return RNFSManager.pathForBundle(bundleNamed);\n  },\n  pathForGroup: function pathForGroup(groupName) {\n    return RNFSManager.pathForGroup(groupName);\n  },\n  getFSInfo: function getFSInfo() {\n    return RNFSManager.getFSInfo();\n  },\n  getAllExternalFilesDirs: function getAllExternalFilesDirs() {\n    return RNFSManager.getAllExternalFilesDirs();\n  },\n  unlink: function unlink(filepath) {\n    return RNFSManager.unlink(normalizeFilePath(filepath)).then(function () {\n      return void 0;\n    });\n  },\n  exists: function exists(filepath) {\n    return RNFSManager.exists(normalizeFilePath(filepath));\n  },\n  stopDownload: function stopDownload(jobId) {\n    RNFSManager.stopDownload(jobId);\n  },\n  resumeDownload: function resumeDownload(jobId) {\n    RNFSManager.resumeDownload(jobId);\n  },\n  isResumable: function isResumable(jobId) {\n    return RNFSManager.isResumable(jobId);\n  },\n  stopUpload: function stopUpload(jobId) {\n    RNFSManager.stopUpload(jobId);\n  },\n  completeHandlerIOS: function completeHandlerIOS(jobId) {\n    return RNFSManager.completeHandlerIOS(jobId);\n  },\n  readDir: function readDir(dirpath) {\n    return readDirGeneric(dirpath, RNFSManager.readDir);\n  },\n  readDirAssets: function readDirAssets(dirpath) {\n    if (!RNFSManager.readDirAssets) {\n      throw new Error('readDirAssets is not available on this platform');\n    }\n    return readDirGeneric(dirpath, RNFSManager.readDirAssets);\n  },\n  existsAssets: function existsAssets(filepath) {\n    if (!RNFSManager.existsAssets) {\n      throw new Error('existsAssets is not available on this platform');\n    }\n    return RNFSManager.existsAssets(filepath);\n  },\n  existsRes: function existsRes(filename) {\n    if (!RNFSManager.existsRes) {\n      throw new Error('existsRes is not available on this platform');\n    }\n    return RNFSManager.existsRes(filename);\n  },\n  readdir: function readdir(dirpath) {\n    return RNFS.readDir(normalizeFilePath(dirpath)).then(function (files) {\n      return files.map(function (file) {\n        return file.name;\n      });\n    });\n  },\n  setReadable: function setReadable(filepath, readable, ownerOnly) {\n    return RNFSManager.setReadable(filepath, readable, ownerOnly).then(function (result) {\n      return result;\n    });\n  },\n  stat: function stat(filepath) {\n    return RNFSManager.stat(normalizeFilePath(filepath)).then(function (result) {\n      return {\n        'path': filepath,\n        'ctime': new Date(result.ctime * 1000),\n        'mtime': new Date(result.mtime * 1000),\n        'size': result.size,\n        'mode': result.mode,\n        'originalFilepath': result.originalFilepath,\n        isFile: function isFile() {\n          return result.type === RNFSFileTypeRegular;\n        },\n        isDirectory: function isDirectory() {\n          return result.type === RNFSFileTypeDirectory;\n        }\n      };\n    });\n  },\n  readFile: function readFile(filepath, encodingOrOptions) {\n    return readFileGeneric(filepath, encodingOrOptions, RNFSManager.readFile);\n  },\n  read: function read(filepath) {\n    var length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    var position = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    var encodingOrOptions = arguments.length > 3 ? arguments[3] : undefined;\n    var options = {\n      encoding: 'utf8'\n    };\n    if (encodingOrOptions) {\n      if (typeof encodingOrOptions === 'string') {\n        options.encoding = encodingOrOptions;\n      } else if (typeof encodingOrOptions === 'object') {\n        options = encodingOrOptions;\n      }\n    }\n    return RNFSManager.read(normalizeFilePath(filepath), length, position).then(function (b64) {\n      var contents;\n      if (options.encoding === 'utf8') {\n        contents = utf8.decode(base64.decode(b64));\n      } else if (options.encoding === 'ascii') {\n        contents = base64.decode(b64);\n      } else if (options.encoding === 'base64') {\n        contents = b64;\n      } else {\n        throw new Error('Invalid encoding type \"' + String(options.encoding) + '\"');\n      }\n      return contents;\n    });\n  },\n  readFileAssets: function readFileAssets(filepath, encodingOrOptions) {\n    if (!RNFSManager.readFileAssets) {\n      throw new Error('readFileAssets is not available on this platform');\n    }\n    return readFileGeneric(filepath, encodingOrOptions, RNFSManager.readFileAssets);\n  },\n  readFileRes: function readFileRes(filename, encodingOrOptions) {\n    if (!RNFSManager.readFileRes) {\n      throw new Error('readFileRes is not available on this platform');\n    }\n    return readFileGeneric(filename, encodingOrOptions, RNFSManager.readFileRes);\n  },\n  hash: function hash(filepath, algorithm) {\n    return RNFSManager.hash(normalizeFilePath(filepath), algorithm);\n  },\n  copyFileAssets: function copyFileAssets(filepath, destPath) {\n    if (!RNFSManager.copyFileAssets) {\n      throw new Error('copyFileAssets is not available on this platform');\n    }\n    return RNFSManager.copyFileAssets(normalizeFilePath(filepath), normalizeFilePath(destPath)).then(function () {\n      return void 0;\n    });\n  },\n  copyFileRes: function copyFileRes(filename, destPath) {\n    if (!RNFSManager.copyFileRes) {\n      throw new Error('copyFileRes is not available on this platform');\n    }\n    return RNFSManager.copyFileRes(filename, normalizeFilePath(destPath)).then(function () {\n      return void 0;\n    });\n  },\n  copyAssetsFileIOS: function copyAssetsFileIOS(imageUri, destPath, width, height) {\n    var scale = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 1.0;\n    var compression = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 1.0;\n    var resizeMode = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : 'contain';\n    return RNFSManager.copyAssetsFileIOS(imageUri, destPath, width, height, scale, compression, resizeMode);\n  },\n  copyAssetsVideoIOS: function copyAssetsVideoIOS(imageUri, destPath) {\n    return RNFSManager.copyAssetsVideoIOS(imageUri, destPath);\n  },\n  writeFile: function writeFile(filepath, contents, encodingOrOptions) {\n    var b64;\n    var options = {\n      encoding: 'utf8'\n    };\n    if (encodingOrOptions) {\n      if (typeof encodingOrOptions === 'string') {\n        options.encoding = encodingOrOptions;\n      } else if (typeof encodingOrOptions === 'object') {\n        options = _objectSpread(_objectSpread({}, options), encodingOrOptions);\n      }\n    }\n    if (options.encoding === 'utf8') {\n      b64 = base64.encode(utf8.encode(contents));\n    } else if (options.encoding === 'ascii') {\n      b64 = base64.encode(contents);\n    } else if (options.encoding === 'base64') {\n      b64 = contents;\n    } else {\n      throw new Error('Invalid encoding type \"' + options.encoding + '\"');\n    }\n    return RNFSManager.writeFile(normalizeFilePath(filepath), b64, options).then(function () {\n      return void 0;\n    });\n  },\n  appendFile: function appendFile(filepath, contents, encodingOrOptions) {\n    var b64;\n    var options = {\n      encoding: 'utf8'\n    };\n    if (encodingOrOptions) {\n      if (typeof encodingOrOptions === 'string') {\n        options.encoding = encodingOrOptions;\n      } else if (typeof encodingOrOptions === 'object') {\n        options = encodingOrOptions;\n      }\n    }\n    if (options.encoding === 'utf8') {\n      b64 = base64.encode(utf8.encode(contents));\n    } else if (options.encoding === 'ascii') {\n      b64 = base64.encode(contents);\n    } else if (options.encoding === 'base64') {\n      b64 = contents;\n    } else {\n      throw new Error('Invalid encoding type \"' + options.encoding + '\"');\n    }\n    return RNFSManager.appendFile(normalizeFilePath(filepath), b64);\n  },\n  write: function write(filepath, contents, position, encodingOrOptions) {\n    var b64;\n    var options = {\n      encoding: 'utf8'\n    };\n    if (encodingOrOptions) {\n      if (typeof encodingOrOptions === 'string') {\n        options.encoding = encodingOrOptions;\n      } else if (typeof encodingOrOptions === 'object') {\n        options = encodingOrOptions;\n      }\n    }\n    if (options.encoding === 'utf8') {\n      b64 = base64.encode(utf8.encode(contents));\n    } else if (options.encoding === 'ascii') {\n      b64 = base64.encode(contents);\n    } else if (options.encoding === 'base64') {\n      b64 = contents;\n    } else {\n      throw new Error('Invalid encoding type \"' + options.encoding + '\"');\n    }\n    if (position === undefined) {\n      position = -1;\n    }\n    return RNFSManager.write(normalizeFilePath(filepath), b64, position).then(function () {\n      return void 0;\n    });\n  },\n  downloadFile: function downloadFile(options) {\n    if (typeof options !== 'object') throw new Error('downloadFile: Invalid value for argument `options`');\n    if (typeof options.fromUrl !== 'string') throw new Error('downloadFile: Invalid value for property `fromUrl`');\n    if (typeof options.toFile !== 'string') throw new Error('downloadFile: Invalid value for property `toFile`');\n    if (options.headers && typeof options.headers !== 'object') throw new Error('downloadFile: Invalid value for property `headers`');\n    if (options.background && typeof options.background !== 'boolean') throw new Error('downloadFile: Invalid value for property `background`');\n    if (options.progressDivider && typeof options.progressDivider !== 'number') throw new Error('downloadFile: Invalid value for property `progressDivider`');\n    if (options.progressInterval && typeof options.progressInterval !== 'number') throw new Error('downloadFile: Invalid value for property `progressInterval`');\n    if (options.readTimeout && typeof options.readTimeout !== 'number') throw new Error('downloadFile: Invalid value for property `readTimeout`');\n    if (options.connectionTimeout && typeof options.connectionTimeout !== 'number') throw new Error('downloadFile: Invalid value for property `connectionTimeout`');\n    if (options.backgroundTimeout && typeof options.backgroundTimeout !== 'number') throw new Error('downloadFile: Invalid value for property `backgroundTimeout`');\n    var jobId = getJobId();\n    var subscriptions = [];\n    if (options.begin) {\n      subscriptions.push(RNFS_NativeEventEmitter.addListener('DownloadBegin', function (res) {\n        if (res.jobId === jobId) options.begin(res);\n      }));\n    }\n    if (options.progress) {\n      subscriptions.push(RNFS_NativeEventEmitter.addListener('DownloadProgress', function (res) {\n        if (res.jobId === jobId) options.progress(res);\n      }));\n    }\n    if (options.resumable) {\n      subscriptions.push(RNFS_NativeEventEmitter.addListener('DownloadResumable', function (res) {\n        if (res.jobId === jobId) options.resumable(res);\n      }));\n    }\n    var bridgeOptions = {\n      jobId: jobId,\n      fromUrl: options.fromUrl,\n      toFile: normalizeFilePath(options.toFile),\n      headers: options.headers || {},\n      background: !!options.background,\n      progressDivider: options.progressDivider || 0,\n      progressInterval: options.progressInterval || 0,\n      readTimeout: options.readTimeout || 15000,\n      connectionTimeout: options.connectionTimeout || 5000,\n      backgroundTimeout: options.backgroundTimeout || 3600000,\n      hasBeginCallback: options.begin instanceof Function,\n      hasProgressCallback: options.progress instanceof Function,\n      hasResumableCallback: options.resumable instanceof Function\n    };\n    return {\n      jobId: jobId,\n      promise: RNFSManager.downloadFile(bridgeOptions).then(function (res) {\n        subscriptions.forEach(function (sub) {\n          return sub.remove();\n        });\n        return res;\n      }).catch(function (e) {\n        return Promise.reject(e);\n      })\n    };\n  },\n  uploadFiles: function uploadFiles(options) {\n    if (!RNFSManager.uploadFiles) {\n      return {\n        jobId: -1,\n        promise: Promise.reject(new Error('`uploadFiles` is unsupported on this platform'))\n      };\n    }\n    var jobId = getJobId();\n    var subscriptions = [];\n    if (typeof options !== 'object') throw new Error('uploadFiles: Invalid value for argument `options`');\n    if (typeof options.toUrl !== 'string') throw new Error('uploadFiles: Invalid value for property `toUrl`');\n    if (!Array.isArray(options.files)) throw new Error('uploadFiles: Invalid value for property `files`');\n    if (options.headers && typeof options.headers !== 'object') throw new Error('uploadFiles: Invalid value for property `headers`');\n    if (options.fields && typeof options.fields !== 'object') throw new Error('uploadFiles: Invalid value for property `fields`');\n    if (options.method && typeof options.method !== 'string') throw new Error('uploadFiles: Invalid value for property `method`');\n    if (options.begin) {\n      subscriptions.push(RNFS_NativeEventEmitter.addListener('UploadBegin', options.begin));\n    } else if (options.beginCallback) {\n      subscriptions.push(RNFS_NativeEventEmitter.addListener('UploadBegin', options.beginCallback));\n    }\n    if (options.progress) {\n      subscriptions.push(RNFS_NativeEventEmitter.addListener('UploadProgress', options.progress));\n    } else if (options.progressCallback) {\n      subscriptions.push(RNFS_NativeEventEmitter.addListener('UploadProgress', options.progressCallback));\n    }\n    var bridgeOptions = {\n      jobId: jobId,\n      toUrl: options.toUrl,\n      files: options.files,\n      binaryStreamOnly: options.binaryStreamOnly || false,\n      headers: options.headers || {},\n      fields: options.fields || {},\n      method: options.method || 'POST',\n      hasBeginCallback: options.begin instanceof Function || options.beginCallback instanceof Function,\n      hasProgressCallback: options.progress instanceof Function || options.progressCallback instanceof Function\n    };\n    return {\n      jobId: jobId,\n      promise: RNFSManager.uploadFiles(bridgeOptions).then(function (res) {\n        subscriptions.forEach(function (sub) {\n          return sub.remove();\n        });\n        return res;\n      })\n    };\n  },\n  touch: function touch(filepath, mtime, ctime) {\n    if (ctime && !(ctime instanceof Date)) throw new Error('touch: Invalid value for argument `ctime`');\n    if (mtime && !(mtime instanceof Date)) throw new Error('touch: Invalid value for argument `mtime`');\n    var ctimeTime = 0;\n    if (isIOS) {\n      ctimeTime = ctime && ctime.getTime();\n    }\n    return RNFSManager.touch(normalizeFilePath(filepath), mtime && mtime.getTime(), ctimeTime);\n  },\n  scanFile: function scanFile(path) {\n    return RNFSManager.scanFile(path);\n  },\n  MainBundlePath: RNFSManager.RNFSMainBundlePath,\n  CachesDirectoryPath: RNFSManager.RNFSCachesDirectoryPath,\n  ExternalCachesDirectoryPath: RNFSManager.RNFSExternalCachesDirectoryPath,\n  DocumentDirectoryPath: RNFSManager.RNFSDocumentDirectoryPath,\n  DownloadDirectoryPath: RNFSManager.RNFSDownloadDirectoryPath,\n  ExternalDirectoryPath: RNFSManager.RNFSExternalDirectoryPath,\n  ExternalStorageDirectoryPath: RNFSManager.RNFSExternalStorageDirectoryPath,\n  TemporaryDirectoryPath: RNFSManager.RNFSTemporaryDirectoryPath,\n  LibraryDirectoryPath: RNFSManager.RNFSLibraryDirectoryPath,\n  PicturesDirectoryPath: RNFSManager.RNFSPicturesDirectoryPath,\n  FileProtectionKeys: RNFSManager.RNFSFileProtectionKeys\n};\nmodule.exports = RNFS;","map":{"version":3,"names":["_defineProperty","require","ownKeys","object","enumerableOnly","keys","Object","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","key","getOwnPropertyDescriptors","defineProperties","defineProperty","RNFSManager","NativeModules","NativeEventEmitter","RNFS_NativeEventEmitter","base64","utf8","isIOS","Platform","OS","RNFSFileTypeRegular","RNFSFileTypeDirectory","jobId","getJobId","normalizeFilePath","path","startsWith","slice","readFileGeneric","filepath","encodingOrOptions","command","options","encoding","then","b64","contents","decode","Error","String","readDirGeneric","dirpath","files","map","file","ctime","Date","mtime","name","size","isFile","type","isDirectory","RNFS","mkdir","undefined","moveFile","destPath","copyFile","pathForBundle","bundleNamed","pathForGroup","groupName","getFSInfo","getAllExternalFilesDirs","unlink","exists","stopDownload","resumeDownload","isResumable","stopUpload","completeHandlerIOS","readDir","readDirAssets","existsAssets","existsRes","filename","readdir","setReadable","readable","ownerOnly","result","stat","mode","originalFilepath","readFile","read","position","readFileAssets","readFileRes","hash","algorithm","copyFileAssets","copyFileRes","copyAssetsFileIOS","imageUri","width","height","scale","compression","resizeMode","copyAssetsVideoIOS","writeFile","encode","appendFile","write","downloadFile","fromUrl","toFile","headers","background","progressDivider","progressInterval","readTimeout","connectionTimeout","backgroundTimeout","subscriptions","begin","addListener","res","progress","resumable","bridgeOptions","hasBeginCallback","Function","hasProgressCallback","hasResumableCallback","promise","sub","remove","catch","e","Promise","reject","uploadFiles","toUrl","Array","isArray","fields","method","beginCallback","progressCallback","binaryStreamOnly","touch","ctimeTime","getTime","scanFile","MainBundlePath","RNFSMainBundlePath","CachesDirectoryPath","RNFSCachesDirectoryPath","ExternalCachesDirectoryPath","RNFSExternalCachesDirectoryPath","DocumentDirectoryPath","RNFSDocumentDirectoryPath","DownloadDirectoryPath","RNFSDownloadDirectoryPath","ExternalDirectoryPath","RNFSExternalDirectoryPath","ExternalStorageDirectoryPath","RNFSExternalStorageDirectoryPath","TemporaryDirectoryPath","RNFSTemporaryDirectoryPath","LibraryDirectoryPath","RNFSLibraryDirectoryPath","PicturesDirectoryPath","RNFSPicturesDirectoryPath","FileProtectionKeys","RNFSFileProtectionKeys","module","exports"],"sources":["/Users/rihong/Documents/Github/SortifyAI/node_modules/react-native-fs/FS.common.js"],"sourcesContent":["/**\n * React Native FS\n * @flow\n */\n\n'use strict';\n\n// This file supports both iOS and Android\n\nvar RNFSManager = require('react-native').NativeModules.RNFSManager;\n\nvar NativeEventEmitter = require('react-native').NativeEventEmitter;\n\nvar RNFS_NativeEventEmitter = new NativeEventEmitter(RNFSManager);\n\nvar base64 = require('base-64');\nvar utf8 = require('utf8');\nvar isIOS = require('react-native').Platform.OS === 'ios';\n\nvar RNFSFileTypeRegular = RNFSManager.RNFSFileTypeRegular;\nvar RNFSFileTypeDirectory = RNFSManager.RNFSFileTypeDirectory;\n\nvar jobId = 0;\n\nvar getJobId = () => {\n  jobId += 1;\n  return jobId;\n};\n\nvar normalizeFilePath = (path: string) => (path.startsWith('file://') ? path.slice(7) : path);\n\ntype MkdirOptions = {\n  NSURLIsExcludedFromBackupKey?: boolean; // iOS only\n  NSFileProtectionKey?: string; // IOS only\n};\n\ntype FileOptions = {\n  NSFileProtectionKey?: string; // IOS only\n};\n\ntype ReadDirItem = {\n  ctime: ?Date;    // The creation date of the file (iOS only)\n  mtime: ?Date;    // The last modified date of the file\n  name: string;     // The name of the item\n  path: string;     // The absolute path to the item\n  size: string;     // Size in bytes\n  isFile: () => boolean;        // Is the file just a file?\n  isDirectory: () => boolean;   // Is the file a directory?\n};\n\ntype StatResult = {\n  name: ?string;     // The name of the item TODO: why is this not documented?\n  path: string;     // The absolute path to the item\n  size: string;     // Size in bytes\n  mode: number;     // UNIX file mode\n  ctime: number;    // Created date\n  mtime: number;    // Last modified date\n  originalFilepath: string;    // In case of content uri this is the pointed file path, otherwise is the same as path\n  isFile: () => boolean;        // Is the file just a file?\n  isDirectory: () => boolean;   // Is the file a directory?\n};\n\ntype Headers = { [name: string]: string };\ntype Fields = { [name: string]: string };\n\ntype DownloadFileOptions = {\n  fromUrl: string;          // URL to download file from\n  toFile: string;           // Local filesystem path to save the file to\n  headers?: Headers;        // An object of headers to be passed to the server\n  background?: boolean;     // Continue the download in the background after the app terminates (iOS only)\n  discretionary?: boolean;  // Allow the OS to control the timing and speed of the download to improve perceived performance  (iOS only)\n  cacheable?: boolean;      // Whether the download can be stored in the shared NSURLCache (iOS only)\n  progressInterval?: number;\n  progressDivider?: number;\n  begin?: (res: DownloadBeginCallbackResult) => void;\n  progress?: (res: DownloadProgressCallbackResult) => void;\n  resumable?: () => void;    // only supported on iOS yet\n  connectionTimeout?: number; // only supported on Android yet\n  readTimeout?: number;       // supported on Android and iOS\n  backgroundTimeout?: number; // Maximum time (in milliseconds) to download an entire resource (iOS only, useful for timing out background downloads)\n};\n\ntype DownloadBeginCallbackResult = {\n  jobId: number;          // The download job ID, required if one wishes to cancel the download. See `stopDownload`.\n  statusCode: number;     // The HTTP status code\n  contentLength: number;  // The total size in bytes of the download resource\n  headers: Headers;       // The HTTP response headers from the server\n};\n\ntype DownloadProgressCallbackResult = {\n  jobId: number;          // The download job ID, required if one wishes to cancel the download. See `stopDownload`.\n  contentLength: number;  // The total size in bytes of the download resource\n  bytesWritten: number;   // The number of bytes written to the file so far\n};\n\ntype DownloadResult = {\n  jobId: number;          // The download job ID, required if one wishes to cancel the download. See `stopDownload`.\n  statusCode: number;     // The HTTP status code\n  bytesWritten: number;   // The number of bytes written to the file\n};\n\ntype UploadFileOptions = {\n  toUrl: string;            // URL to upload file to\n  binaryStreamOnly?: boolean; // Allow for binary data stream for file to be uploaded without extra headers, Default is 'false'\n  files: UploadFileItem[];  // An array of objects with the file information to be uploaded.\n  headers?: Headers;        // An object of headers to be passed to the server\n  fields?: Fields;          // An object of fields to be passed to the server\n  method?: string;          // Default is 'POST', supports 'POST' and 'PUT'\n  beginCallback?: (res: UploadBeginCallbackResult) => void; // deprecated\n  progressCallback?: (res: UploadProgressCallbackResult) => void; // deprecated\n  begin?: (res: UploadBeginCallbackResult) => void;\n  progress?: (res: UploadProgressCallbackResult) => void;\n};\n\ntype UploadFileItem = {\n  name: string;       // Name of the file, if not defined then filename is used\n  filename: string;   // Name of file\n  filepath: string;   // Path to file\n  filetype: string;   // The mimetype of the file to be uploaded, if not defined it will get mimetype from `filepath` extension\n};\n\ntype UploadBeginCallbackResult = {\n  jobId: number;        // The upload job ID, required if one wishes to cancel the upload. See `stopUpload`.\n};\n\ntype UploadProgressCallbackResult = {\n  jobId: number;                      // The upload job ID, required if one wishes to cancel the upload. See `stopUpload`.\n  totalBytesExpectedToSend: number;   // The total number of bytes that will be sent to the server\n  totalBytesSent: number;             // The number of bytes sent to the server\n};\n\ntype UploadResult = {\n  jobId: number;        // The upload job ID, required if one wishes to cancel the upload. See `stopUpload`.\n  statusCode: number;   // The HTTP status code\n  headers: Headers;     // The HTTP response headers from the server\n  body: string;         // The HTTP response body\n};\n\ntype FSInfoResult = {\n  totalSpace: number;   // The total amount of storage space on the device (in bytes).\n  freeSpace: number;    // The amount of available storage space on the device (in bytes).\n};\n\n/**\n * Generic function used by readFile and readFileAssets\n */\nfunction readFileGeneric(filepath: string, encodingOrOptions: ?string, command: Function) {\n  var options = {\n    encoding: 'utf8'\n  };\n\n  if (encodingOrOptions) {\n    if (typeof encodingOrOptions === 'string') {\n      options.encoding = encodingOrOptions;\n    } else if (typeof encodingOrOptions === 'object') {\n      options = encodingOrOptions;\n    }\n  }\n\n  return command(normalizeFilePath(filepath)).then((b64) => {\n    var contents;\n\n    if (options.encoding === 'utf8') {\n      contents = utf8.decode(base64.decode(b64));\n    } else if (options.encoding === 'ascii') {\n      contents = base64.decode(b64);\n    } else if (options.encoding === 'base64') {\n      contents = b64;\n    } else {\n      throw new Error('Invalid encoding type \"' + String(options.encoding) + '\"');\n    }\n\n    return contents;\n  });\n}\n\n/**\n * Generic function used by readDir and readDirAssets\n */\nfunction readDirGeneric(dirpath: string, command: Function) {\n  return command(normalizeFilePath(dirpath)).then(files => {\n    return files.map(file => ({\n      ctime: file.ctime && new Date(file.ctime * 1000) || null,\n      mtime: file.mtime && new Date(file.mtime * 1000) || null,\n      name: file.name,\n      path: file.path,\n      size: file.size,\n      isFile: () => file.type === RNFSFileTypeRegular,\n      isDirectory: () => file.type === RNFSFileTypeDirectory,\n    }));\n  });\n}\n\nvar RNFS = {\n\n  mkdir(filepath: string, options: MkdirOptions = {}): Promise<void> {\n    return RNFSManager.mkdir(normalizeFilePath(filepath), options).then(() => void 0);\n  },\n\n  moveFile(filepath: string, destPath: string, options: FileOptions = {}): Promise<void> {\n    return RNFSManager.moveFile(normalizeFilePath(filepath), normalizeFilePath(destPath), options).then(() => void 0);\n  },\n\n  copyFile(filepath: string, destPath: string, options: FileOptions = {}): Promise<void> {\n    return RNFSManager.copyFile(normalizeFilePath(filepath), normalizeFilePath(destPath), options).then(() => void 0);\n  },\n\n  pathForBundle(bundleNamed: string): Promise<string> {\n    return RNFSManager.pathForBundle(bundleNamed);\n  },\n\n  pathForGroup(groupName: string): Promise<string> {\n    return RNFSManager.pathForGroup(groupName);\n  },\n\n  getFSInfo(): Promise<FSInfoResult> {\n    return RNFSManager.getFSInfo();\n  },\n\n  getAllExternalFilesDirs(): Promise<string> {\n    return RNFSManager.getAllExternalFilesDirs();\n  },\n\n  unlink(filepath: string): Promise<void> {\n    return RNFSManager.unlink(normalizeFilePath(filepath)).then(() => void 0);\n  },\n\n  exists(filepath: string): Promise<boolean> {\n    return RNFSManager.exists(normalizeFilePath(filepath));\n  },\n\n  stopDownload(jobId: number): void {\n    RNFSManager.stopDownload(jobId);\n  },\n\n  resumeDownload(jobId: number): void {\n    RNFSManager.resumeDownload(jobId);\n  },\n\n  isResumable(jobId: number): Promise<bool> {\n    return RNFSManager.isResumable(jobId);\n  },\n\n  stopUpload(jobId: number): void {\n    RNFSManager.stopUpload(jobId);\n  },\n\n  completeHandlerIOS(jobId: number): void {\n    return RNFSManager.completeHandlerIOS(jobId);\n  },\n\n  readDir(dirpath: string): Promise<ReadDirItem[]> {\n    return readDirGeneric(dirpath, RNFSManager.readDir);\n  },\n\n  // Android-only\n  readDirAssets(dirpath: string): Promise<ReadDirItem[]> {\n    if (!RNFSManager.readDirAssets) {\n      throw new Error('readDirAssets is not available on this platform');\n    }\n    return readDirGeneric(dirpath, RNFSManager.readDirAssets);\n  },\n\n  // Android-only\n  existsAssets(filepath: string) {\n    if (!RNFSManager.existsAssets) {\n      throw new Error('existsAssets is not available on this platform');\n    }\n    return RNFSManager.existsAssets(filepath);\n  },\n\n  // Android-only\n  existsRes(filename: string) {\n    if (!RNFSManager.existsRes) {\n      throw new Error('existsRes is not available on this platform');\n    }\n    return RNFSManager.existsRes(filename);\n  },\n\n  // Node style version (lowercase d). Returns just the names\n  readdir(dirpath: string): Promise<string[]> {\n    return RNFS.readDir(normalizeFilePath(dirpath)).then(files => {\n      return files.map(file => file.name);\n    });\n  },\n\n  // setReadable for Android\n  setReadable(filepath: string, readable: boolean, ownerOnly: boolean): Promise<boolean> {\n    return RNFSManager.setReadable(filepath, readable, ownerOnly).then((result) => {\n      return result;\n    })\n  },\n\n  stat(filepath: string): Promise<StatResult> {\n    return RNFSManager.stat(normalizeFilePath(filepath)).then((result) => {\n      return {\n        'path': filepath,\n        'ctime': new Date(result.ctime * 1000),\n        'mtime': new Date(result.mtime * 1000),\n        'size': result.size,\n        'mode': result.mode,\n        'originalFilepath': result.originalFilepath,\n        isFile: () => result.type === RNFSFileTypeRegular,\n        isDirectory: () => result.type === RNFSFileTypeDirectory,\n      };\n    });\n  },\n\n  readFile(filepath: string, encodingOrOptions?: any): Promise<string> {\n    return readFileGeneric(filepath, encodingOrOptions, RNFSManager.readFile);\n  },\n\n  read(filepath: string, length: number = 0, position: number = 0, encodingOrOptions?: any): Promise<string> {\n    var options = {\n      encoding: 'utf8'\n    };\n\n    if (encodingOrOptions) {\n      if (typeof encodingOrOptions === 'string') {\n        options.encoding = encodingOrOptions;\n      } else if (typeof encodingOrOptions === 'object') {\n        options = encodingOrOptions;\n      }\n    }\n\n    return RNFSManager.read(normalizeFilePath(filepath), length, position).then((b64) => {\n      var contents;\n\n      if (options.encoding === 'utf8') {\n        contents = utf8.decode(base64.decode(b64));\n      } else if (options.encoding === 'ascii') {\n        contents = base64.decode(b64);\n      } else if (options.encoding === 'base64') {\n        contents = b64;\n      } else {\n        throw new Error('Invalid encoding type \"' + String(options.encoding) + '\"');\n      }\n\n      return contents;\n    });\n  },\n\n  // Android only\n  readFileAssets(filepath: string, encodingOrOptions?: any): Promise<string> {\n    if (!RNFSManager.readFileAssets) {\n      throw new Error('readFileAssets is not available on this platform');\n    }\n    return readFileGeneric(filepath, encodingOrOptions, RNFSManager.readFileAssets);\n  },\n\n  // Android only\n  readFileRes(filename: string, encodingOrOptions?: any): Promise<string> {\n    if (!RNFSManager.readFileRes) {\n      throw new Error('readFileRes is not available on this platform');\n    }\n    return readFileGeneric(filename, encodingOrOptions, RNFSManager.readFileRes);\n  },\n\n  hash(filepath: string, algorithm: string): Promise<string> {\n    return RNFSManager.hash(normalizeFilePath(filepath), algorithm);\n  },\n\n  // Android only\n  copyFileAssets(filepath: string, destPath: string) {\n    if (!RNFSManager.copyFileAssets) {\n      throw new Error('copyFileAssets is not available on this platform');\n    }\n    return RNFSManager.copyFileAssets(normalizeFilePath(filepath), normalizeFilePath(destPath)).then(() => void 0);\n  },\n\n  // Android only\n  copyFileRes(filename: string, destPath: string) {\n    if (!RNFSManager.copyFileRes) {\n      throw new Error('copyFileRes is not available on this platform');\n    }\n    return RNFSManager.copyFileRes(filename, normalizeFilePath(destPath)).then(() => void 0);\n  },\n\n  // iOS only\n  // Copies fotos from asset-library (camera-roll) to a specific location\n  // with a given width or height\n  // @see: https://developer.apple.com/reference/photos/phimagemanager/1616964-requestimageforasset\n  copyAssetsFileIOS(imageUri: string, destPath: string, width: number, height: number,\n    scale: number = 1.0, compression: number = 1.0, resizeMode: string = 'contain'): Promise<string> {\n    return RNFSManager.copyAssetsFileIOS(imageUri, destPath, width, height, scale, compression, resizeMode);\n  },\n\n  // iOS only\n  // Copies fotos from asset-library (camera-roll) to a specific location\n  // with a given width or height\n  // @see: https://developer.apple.com/reference/photos/phimagemanager/1616964-requestimageforasset\n  copyAssetsVideoIOS(imageUri: string, destPath: string): Promise<string> {\n    return RNFSManager.copyAssetsVideoIOS(imageUri, destPath);\n  },\n\n  writeFile(filepath: string, contents: string, encodingOrOptions?: any): Promise<void> {\n    var b64;\n\n    var options = {\n      encoding: 'utf8'\n    };\n\n    if (encodingOrOptions) {\n      if (typeof encodingOrOptions === 'string') {\n        options.encoding = encodingOrOptions;\n      } else if (typeof encodingOrOptions === 'object') {\n        options = {\n          ...options,\n          ...encodingOrOptions\n        };\n      }\n    }\n\n    if (options.encoding === 'utf8') {\n      b64 = base64.encode(utf8.encode(contents));\n    } else if (options.encoding === 'ascii') {\n      b64 = base64.encode(contents);\n    } else if (options.encoding === 'base64') {\n      b64 = contents;\n    } else {\n      throw new Error('Invalid encoding type \"' + options.encoding + '\"');\n    }\n\n    return RNFSManager.writeFile(normalizeFilePath(filepath), b64, options).then(() => void 0);\n  },\n\n  appendFile(filepath: string, contents: string, encodingOrOptions?: any): Promise<void> {\n    var b64;\n\n    var options = {\n      encoding: 'utf8'\n    };\n\n    if (encodingOrOptions) {\n      if (typeof encodingOrOptions === 'string') {\n        options.encoding = encodingOrOptions;\n      } else if (typeof encodingOrOptions === 'object') {\n        options = encodingOrOptions;\n      }\n    }\n\n    if (options.encoding === 'utf8') {\n      b64 = base64.encode(utf8.encode(contents));\n    } else if (options.encoding === 'ascii') {\n      b64 = base64.encode(contents);\n    } else if (options.encoding === 'base64') {\n      b64 = contents;\n    } else {\n      throw new Error('Invalid encoding type \"' + options.encoding + '\"');\n    }\n\n    return RNFSManager.appendFile(normalizeFilePath(filepath), b64);\n  },\n\n  write(filepath: string, contents: string, position?: number, encodingOrOptions?: any): Promise<void> {\n    var b64;\n\n    var options = {\n      encoding: 'utf8'\n    };\n\n    if (encodingOrOptions) {\n      if (typeof encodingOrOptions === 'string') {\n        options.encoding = encodingOrOptions;\n      } else if (typeof encodingOrOptions === 'object') {\n        options = encodingOrOptions;\n      }\n    }\n\n    if (options.encoding === 'utf8') {\n      b64 = base64.encode(utf8.encode(contents));\n    } else if (options.encoding === 'ascii') {\n      b64 = base64.encode(contents);\n    } else if (options.encoding === 'base64') {\n      b64 = contents;\n    } else {\n      throw new Error('Invalid encoding type \"' + options.encoding + '\"');\n    }\n\n    if (position === undefined) {\n      position = -1;\n    }\n\n    return RNFSManager.write(normalizeFilePath(filepath), b64, position).then(() => void 0);\n  },\n\n  downloadFile(options: DownloadFileOptions): { jobId: number, promise: Promise<DownloadResult> } {\n    if (typeof options !== 'object') throw new Error('downloadFile: Invalid value for argument `options`');\n    if (typeof options.fromUrl !== 'string') throw new Error('downloadFile: Invalid value for property `fromUrl`');\n    if (typeof options.toFile !== 'string') throw new Error('downloadFile: Invalid value for property `toFile`');\n    if (options.headers && typeof options.headers !== 'object') throw new Error('downloadFile: Invalid value for property `headers`');\n    if (options.background && typeof options.background !== 'boolean') throw new Error('downloadFile: Invalid value for property `background`');\n    if (options.progressDivider && typeof options.progressDivider !== 'number') throw new Error('downloadFile: Invalid value for property `progressDivider`');\n    if (options.progressInterval && typeof options.progressInterval !== 'number') throw new Error('downloadFile: Invalid value for property `progressInterval`');\n    if (options.readTimeout && typeof options.readTimeout !== 'number') throw new Error('downloadFile: Invalid value for property `readTimeout`');\n    if (options.connectionTimeout && typeof options.connectionTimeout !== 'number') throw new Error('downloadFile: Invalid value for property `connectionTimeout`');\n    if (options.backgroundTimeout && typeof options.backgroundTimeout !== 'number') throw new Error('downloadFile: Invalid value for property `backgroundTimeout`');\n\n    var jobId = getJobId();\n    var subscriptions = [];\n\n    if (options.begin) {\n      subscriptions.push(RNFS_NativeEventEmitter.addListener('DownloadBegin', (res) => {\n        if (res.jobId === jobId) options.begin(res);\n      }));\n    }\n\n    if (options.progress) {\n      subscriptions.push(RNFS_NativeEventEmitter.addListener('DownloadProgress', (res) => {\n        if (res.jobId === jobId) options.progress(res);\n      }));\n    }\n\n    if (options.resumable) {\n      subscriptions.push(RNFS_NativeEventEmitter.addListener('DownloadResumable', (res) => {\n        if (res.jobId === jobId) options.resumable(res);\n      }));\n    }\n\n    var bridgeOptions = {\n      jobId: jobId,\n      fromUrl: options.fromUrl,\n      toFile: normalizeFilePath(options.toFile),\n      headers: options.headers || {},\n      background: !!options.background,\n      progressDivider: options.progressDivider || 0,\n      progressInterval: options.progressInterval || 0,\n      readTimeout: options.readTimeout || 15000,\n      connectionTimeout: options.connectionTimeout || 5000,\n      backgroundTimeout: options.backgroundTimeout || 3600000, // 1 hour\n      hasBeginCallback: options.begin instanceof Function,\n      hasProgressCallback: options.progress instanceof Function,\n      hasResumableCallback: options.resumable instanceof Function,\n    };\n\n    return {\n      jobId,\n      promise: RNFSManager.downloadFile(bridgeOptions).then(res => {\n        subscriptions.forEach(sub => sub.remove());\n        return res;\n      })\n        .catch(e => {\n          return Promise.reject(e);\n        })\n    };\n  },\n\n  uploadFiles(options: UploadFileOptions): { jobId: number, promise: Promise<UploadResult> } {\n    if (!RNFSManager.uploadFiles) {\n      return {\n        jobId: -1,\n        promise: Promise.reject(new Error('`uploadFiles` is unsupported on this platform'))\n      };\n    }\n\n    var jobId = getJobId();\n    var subscriptions = [];\n\n    if (typeof options !== 'object') throw new Error('uploadFiles: Invalid value for argument `options`');\n    if (typeof options.toUrl !== 'string') throw new Error('uploadFiles: Invalid value for property `toUrl`');\n    if (!Array.isArray(options.files)) throw new Error('uploadFiles: Invalid value for property `files`');\n    if (options.headers && typeof options.headers !== 'object') throw new Error('uploadFiles: Invalid value for property `headers`');\n    if (options.fields && typeof options.fields !== 'object') throw new Error('uploadFiles: Invalid value for property `fields`');\n    if (options.method && typeof options.method !== 'string') throw new Error('uploadFiles: Invalid value for property `method`');\n\n    if (options.begin) {\n      subscriptions.push(RNFS_NativeEventEmitter.addListener('UploadBegin', options.begin));\n    } else if (options.beginCallback) {\n      // Deprecated\n      subscriptions.push(RNFS_NativeEventEmitter.addListener('UploadBegin', options.beginCallback));\n    }\n\n    if (options.progress) {\n      subscriptions.push(RNFS_NativeEventEmitter.addListener('UploadProgress', options.progress));\n    } else if (options.progressCallback) {\n      // Deprecated\n      subscriptions.push(RNFS_NativeEventEmitter.addListener('UploadProgress', options.progressCallback));\n    }\n\n    var bridgeOptions = {\n      jobId: jobId,\n      toUrl: options.toUrl,\n      files: options.files,\n      binaryStreamOnly: options.binaryStreamOnly || false,\n      headers: options.headers || {},\n      fields: options.fields || {},\n      method: options.method || 'POST',\n      hasBeginCallback: options.begin instanceof Function || options.beginCallback instanceof Function,\n      hasProgressCallback: options.progress instanceof Function || options.progressCallback instanceof Function,\n    };\n\n    return {\n      jobId,\n      promise: RNFSManager.uploadFiles(bridgeOptions).then(res => {\n        subscriptions.forEach(sub => sub.remove());\n        return res;\n      })\n    };\n  },\n\n  touch(filepath: string, mtime?: Date, ctime?: Date): Promise<void> {\n    if (ctime && !(ctime instanceof Date)) throw new Error('touch: Invalid value for argument `ctime`');\n    if (mtime && !(mtime instanceof Date)) throw new Error('touch: Invalid value for argument `mtime`');\n    var ctimeTime = 0;\n    if (isIOS) {\n      ctimeTime = ctime && ctime.getTime();\n    }\n    return RNFSManager.touch(\n      normalizeFilePath(filepath),\n      mtime && mtime.getTime(),\n      ctimeTime\n    );\n  },\n\n  scanFile(path: string): Promise<ReadDirItem[]> {\n    return RNFSManager.scanFile(path);\n  },\n\n  MainBundlePath: RNFSManager.RNFSMainBundlePath,\n  CachesDirectoryPath: RNFSManager.RNFSCachesDirectoryPath,\n  ExternalCachesDirectoryPath: RNFSManager.RNFSExternalCachesDirectoryPath,\n  DocumentDirectoryPath: RNFSManager.RNFSDocumentDirectoryPath,\n  DownloadDirectoryPath: RNFSManager.RNFSDownloadDirectoryPath,\n  ExternalDirectoryPath: RNFSManager.RNFSExternalDirectoryPath,\n  ExternalStorageDirectoryPath: RNFSManager.RNFSExternalStorageDirectoryPath,\n  TemporaryDirectoryPath: RNFSManager.RNFSTemporaryDirectoryPath,\n  LibraryDirectoryPath: RNFSManager.RNFSLibraryDirectoryPath,\n  PicturesDirectoryPath: RNFSManager.RNFSPicturesDirectoryPath,\n  FileProtectionKeys: RNFSManager.RNFSFileProtectionKeys\n};\n\nmodule.exports = RNFS;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}