{"ast":null,"code":"import NativeModules from \"react-native-web/dist/exports/NativeModules\";\nimport { getAssetByID } from \"./AssetRegistry\";\nimport AssetSourceResolver from \"./AssetSourceResolver\";\nvar _customSourceTransformer;\nvar _serverURL;\nvar _scriptURL;\nvar _sourceCodeScriptURL;\nfunction getSourceCodeScriptURL() {\n  if (_sourceCodeScriptURL) {\n    return _sourceCodeScriptURL;\n  }\n  var sourceCode = nativeExtensions && nativeExtensions.SourceCode;\n  if (!sourceCode) {\n    sourceCode = NativeModules && NativeModules.SourceCode;\n  }\n  _sourceCodeScriptURL = sourceCode.scriptURL;\n  return _sourceCodeScriptURL;\n}\nfunction getDevServerURL() {\n  if (_serverURL === undefined) {\n    var sourceCodeScriptURL = getSourceCodeScriptURL();\n    var match = sourceCodeScriptURL && sourceCodeScriptURL.match(/^https?:\\/\\/.*?\\//);\n    if (match) {\n      _serverURL = match[0];\n    } else {\n      _serverURL = null;\n    }\n  }\n  return _serverURL;\n}\nfunction _coerceLocalScriptURL(scriptURL) {\n  if (scriptURL) {\n    if (scriptURL.startsWith('assets://')) {\n      return null;\n    }\n    scriptURL = scriptURL.substring(0, scriptURL.lastIndexOf('/') + 1);\n    if (!scriptURL.includes('://')) {\n      scriptURL = 'file://' + scriptURL;\n    }\n  }\n  return null;\n}\nfunction getScriptURL() {\n  if (_scriptURL === undefined) {\n    _scriptURL = _coerceLocalScriptURL(getSourceCodeScriptURL());\n  }\n  return _scriptURL;\n}\nexport function setCustomSourceTransformer(transformer) {\n  _customSourceTransformer = transformer;\n}\nexport default function resolveAssetSource(source) {\n  if (typeof source === 'object') {\n    return source;\n  }\n  var asset = getAssetByID(source);\n  if (!asset) {\n    return undefined;\n  }\n  var resolver = new AssetSourceResolver(getDevServerURL(), getScriptURL(), asset);\n  if (_customSourceTransformer) {\n    return _customSourceTransformer(resolver);\n  }\n  return resolver.defaultAsset();\n}\nObject.defineProperty(resolveAssetSource, 'setCustomSourceTransformer', {\n  get: function get() {\n    return setCustomSourceTransformer;\n  }\n});\nvar pickScale = AssetSourceResolver.pickScale;\nexport { pickScale };","map":{"version":3,"names":["getAssetByID","AssetSourceResolver","_customSourceTransformer","_serverURL","_scriptURL","_sourceCodeScriptURL","getSourceCodeScriptURL","sourceCode","nativeExtensions","SourceCode","NativeModules","scriptURL","getDevServerURL","undefined","sourceCodeScriptURL","match","_coerceLocalScriptURL","startsWith","substring","lastIndexOf","includes","getScriptURL","setCustomSourceTransformer","transformer","resolveAssetSource","source","asset","resolver","defaultAsset","Object","defineProperty","get","pickScale"],"sources":["/Users/rihong/Documents/Github/SortifyAI/node_modules/expo-asset/src/resolveAssetSource.web.ts"],"sourcesContent":["import { NativeModules } from 'react-native';\nimport { getAssetByID } from './AssetRegistry';\n\nimport AssetSourceResolver, { ResolvedAssetSource } from './AssetSourceResolver';\n\ndeclare var nativeExtensions: any;\n\nlet _customSourceTransformer;\nlet _serverURL: string | undefined | null;\nlet _scriptURL: string | undefined | null;\nlet _sourceCodeScriptURL: string | undefined | null;\n\nfunction getSourceCodeScriptURL(): string | undefined | null {\n  if (_sourceCodeScriptURL) {\n    return _sourceCodeScriptURL;\n  }\n\n  let sourceCode = nativeExtensions && nativeExtensions.SourceCode;\n  if (!sourceCode) {\n    sourceCode = NativeModules && NativeModules.SourceCode;\n  }\n  _sourceCodeScriptURL = sourceCode.scriptURL;\n  return _sourceCodeScriptURL;\n}\n\nfunction getDevServerURL(): string | null {\n  if (_serverURL === undefined) {\n    const sourceCodeScriptURL = getSourceCodeScriptURL();\n    const match = sourceCodeScriptURL && sourceCodeScriptURL.match(/^https?:\\/\\/.*?\\//);\n    if (match) {\n      // jsBundle was loaded from network\n      _serverURL = match[0];\n    } else {\n      // jsBundle was loaded from file\n      _serverURL = null;\n    }\n  }\n  return _serverURL;\n}\n\nfunction _coerceLocalScriptURL(scriptURL: string | undefined | null): string | null {\n  if (scriptURL) {\n    if (scriptURL.startsWith('assets://')) {\n      // android: running from within assets, no offline path to use\n      return null;\n    }\n    scriptURL = scriptURL.substring(0, scriptURL.lastIndexOf('/') + 1);\n    if (!scriptURL.includes('://')) {\n      // Add file protocol in case we have an absolute file path and not a URL.\n      // This shouldn't really be necessary. scriptURL should be a URL.\n      scriptURL = 'file://' + scriptURL;\n    }\n  }\n  return null;\n}\n\nfunction getScriptURL(): string | null {\n  if (_scriptURL === undefined) {\n    _scriptURL = _coerceLocalScriptURL(getSourceCodeScriptURL());\n  }\n  return _scriptURL;\n}\n\nexport function setCustomSourceTransformer(\n  transformer: (resolver: AssetSourceResolver) => ResolvedAssetSource\n): void {\n  _customSourceTransformer = transformer;\n}\n\n/**\n * `source` is either a number (opaque type returned by require('./foo.png'))\n * or an `ImageSource` like { uri: '<http location || file path>' }\n */\nexport default function resolveAssetSource(source: any): ResolvedAssetSource | undefined {\n  if (typeof source === 'object') {\n    return source;\n  }\n\n  const asset = getAssetByID(source);\n  if (!asset) {\n    return undefined;\n  }\n\n  const resolver = new AssetSourceResolver(getDevServerURL(), getScriptURL(), asset);\n  if (_customSourceTransformer) {\n    return _customSourceTransformer(resolver);\n  }\n  return resolver.defaultAsset();\n}\n\nObject.defineProperty(resolveAssetSource, 'setCustomSourceTransformer', {\n  get() {\n    return setCustomSourceTransformer;\n  },\n});\n\nexport const { pickScale } = AssetSourceResolver;\n"],"mappings":";AACA,SAASA,YAAY;AAErB,OAAOC,mBAA4C;AAInD,IAAIC,wBAAwB;AAC5B,IAAIC,UAAqC;AACzC,IAAIC,UAAqC;AACzC,IAAIC,oBAA+C;AAEnD,SAASC,sBAAsBA,CAAA;EAC7B,IAAID,oBAAoB,EAAE;IACxB,OAAOA,oBAAoB;;EAG7B,IAAIE,UAAU,GAAGC,gBAAgB,IAAIA,gBAAgB,CAACC,UAAU;EAChE,IAAI,CAACF,UAAU,EAAE;IACfA,UAAU,GAAGG,aAAa,IAAIA,aAAa,CAACD,UAAU;;EAExDJ,oBAAoB,GAAGE,UAAU,CAACI,SAAS;EAC3C,OAAON,oBAAoB;AAC7B;AAEA,SAASO,eAAeA,CAAA;EACtB,IAAIT,UAAU,KAAKU,SAAS,EAAE;IAC5B,IAAMC,mBAAmB,GAAGR,sBAAsB,EAAE;IACpD,IAAMS,KAAK,GAAGD,mBAAmB,IAAIA,mBAAmB,CAACC,KAAK,CAAC,mBAAmB,CAAC;IACnF,IAAIA,KAAK,EAAE;MAETZ,UAAU,GAAGY,KAAK,CAAC,CAAC,CAAC;KACtB,MAAM;MAELZ,UAAU,GAAG,IAAI;;;EAGrB,OAAOA,UAAU;AACnB;AAEA,SAASa,qBAAqBA,CAACL,SAAoC;EACjE,IAAIA,SAAS,EAAE;IACb,IAAIA,SAAS,CAACM,UAAU,CAAC,WAAW,CAAC,EAAE;MAErC,OAAO,IAAI;;IAEbN,SAAS,GAAGA,SAAS,CAACO,SAAS,CAAC,CAAC,EAAEP,SAAS,CAACQ,WAAW,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;IAClE,IAAI,CAACR,SAAS,CAACS,QAAQ,CAAC,KAAK,CAAC,EAAE;MAG9BT,SAAS,GAAG,SAAS,GAAGA,SAAS;;;EAGrC,OAAO,IAAI;AACb;AAEA,SAASU,YAAYA,CAAA;EACnB,IAAIjB,UAAU,KAAKS,SAAS,EAAE;IAC5BT,UAAU,GAAGY,qBAAqB,CAACV,sBAAsB,EAAE,CAAC;;EAE9D,OAAOF,UAAU;AACnB;AAEA,OAAM,SAAUkB,0BAA0BA,CACxCC,WAAmE;EAEnErB,wBAAwB,GAAGqB,WAAW;AACxC;AAMA,eAAc,SAAUC,kBAAkBA,CAACC,MAAW;EACpD,IAAI,OAAOA,MAAM,KAAK,QAAQ,EAAE;IAC9B,OAAOA,MAAM;;EAGf,IAAMC,KAAK,GAAG1B,YAAY,CAACyB,MAAM,CAAC;EAClC,IAAI,CAACC,KAAK,EAAE;IACV,OAAOb,SAAS;;EAGlB,IAAMc,QAAQ,GAAG,IAAI1B,mBAAmB,CAACW,eAAe,EAAE,EAAES,YAAY,EAAE,EAAEK,KAAK,CAAC;EAClF,IAAIxB,wBAAwB,EAAE;IAC5B,OAAOA,wBAAwB,CAACyB,QAAQ,CAAC;;EAE3C,OAAOA,QAAQ,CAACC,YAAY,EAAE;AAChC;AAEAC,MAAM,CAACC,cAAc,CAACN,kBAAkB,EAAE,4BAA4B,EAAE;EACtEO,GAAG,WAAAA,IAAA;IACD,OAAOT,0BAA0B;EACnC;CACD,CAAC;AAAC,IAEYU,SAAS,GAAK/B,mBAAmB,CAAjC+B,SAAS;AAAA,SAAAA,SAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}