{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\OHyic\\\\Desktop\\\\react_native\\\\ai-app\\\\App.js\";\nimport React, { useState, useEffect } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport { Button, Input } from 'react-native-elements';\nimport Svg, { Rect } from 'react-native-svg';\nimport * as tf from '@tensorflow/tfjs';\nimport { fetch, bundleResourceIO } from '@tensorflow/tfjs-react-native';\nimport * as blazeface from '@tensorflow-models/blazeface';\nimport * as jpeg from 'jpeg-js';\nexport default function App() {\n  var _this = this;\n\n  var _useState = useState(\"https://raw.githubusercontent.com/ohyicong/masksdetection/master/dataset/without_mask/108.jpg\"),\n      _useState2 = _slicedToArray(_useState, 2),\n      imageLink = _useState2[0],\n      setImageLink = _useState2[1];\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      faces = _useState4[0],\n      setFaces = _useState4[1];\n\n  var _useState5 = useState(\"\"),\n      _useState6 = _slicedToArray(_useState5, 2),\n      faceDetector = _useState6[0],\n      setFaceDetector = _useState6[1];\n\n  var _useState7 = useState(\"\"),\n      _useState8 = _slicedToArray(_useState7, 2),\n      maskDetector = _useState8[0],\n      setMaskDetector = _useState8[1];\n\n  useEffect(function _callee() {\n    var modelJson, modelWeight, maskDetector, faceDetector;\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            console.log(\"[+] Application started\");\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(tf.ready());\n\n          case 3:\n            console.log(\"[+] Loading custom mask detection model\");\n            _context.next = 6;\n            return _regeneratorRuntime.awrap(require(\"./assets/models/model.json\"));\n\n          case 6:\n            modelJson = _context.sent;\n            _context.next = 9;\n            return _regeneratorRuntime.awrap(require(\"./assets/models/group1-shard.bin\"));\n\n          case 9:\n            modelWeight = _context.sent;\n            _context.next = 12;\n            return _regeneratorRuntime.awrap(tf.loadLayersModel(bundleResourceIO(modelJson, modelWeight)));\n\n          case 12:\n            maskDetector = _context.sent;\n            console.log(\"[+] Loading pre-trained face detection model\");\n            _context.next = 16;\n            return _regeneratorRuntime.awrap(blazeface.load());\n\n          case 16:\n            faceDetector = _context.sent;\n\n          case 17:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }, []);\n\n  function imageToTensor(rawImageData) {\n    var TO_UINT8ARRAY = true;\n\n    var _jpeg$decode = jpeg.decode(rawImageData, TO_UINT8ARRAY),\n        width = _jpeg$decode.width,\n        height = _jpeg$decode.height,\n        data = _jpeg$decode.data;\n\n    var buffer = new Uint8Array(width * height * 3);\n    var offset = 0;\n\n    for (var i = 0; i < buffer.length; i += 3) {\n      buffer[i] = data[offset];\n      buffer[i + 1] = data[offset + 1];\n      buffer[i + 2] = data[offset + 2];\n      offset += 4;\n    }\n\n    return tf.tensor3d(buffer, [height, width, 3]);\n  }\n\n  var getFaces = function getFaces() {\n    var response, rawImageData, imageTensor, _faces, tempArray, i, color, width, height, faceTensor, result;\n\n    return _regeneratorRuntime.async(function getFaces$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.prev = 0;\n            console.log(\"[+] Retrieving image from link :\" + imageLink);\n            _context2.next = 4;\n            return _regeneratorRuntime.awrap(fetch(imageLink, {}, {\n              isBinary: true\n            }));\n\n          case 4:\n            response = _context2.sent;\n            _context2.next = 7;\n            return _regeneratorRuntime.awrap(response.arrayBuffer());\n\n          case 7:\n            rawImageData = _context2.sent;\n            imageTensor = imageToTensor(rawImageData).resizeBilinear([224, 224]);\n            _context2.next = 11;\n            return _regeneratorRuntime.awrap(faceDetector.estimateFaces(imageTensor, false));\n\n          case 11:\n            _faces = _context2.sent;\n            tempArray = [];\n            i = 0;\n\n          case 14:\n            if (!(i < _faces.length)) {\n              _context2.next = 28;\n              break;\n            }\n\n            color = \"red\";\n            width = parseInt(_faces[i].bottomRight[1] - _faces[i].topLeft[1]);\n            height = parseInt(_faces[i].bottomRight[0] - _faces[i].topLeft[0]);\n            faceTensor = imageTensor.slice([parseInt(_faces[i].topLeft[1]), parseInt(_faces[i].topLeft[0]), 0], [width, height, 3]);\n            faceTensor = faceTensor.resizeBilinear([224, 224]).reshape([1, 224, 224, 3]);\n            _context2.next = 22;\n            return _regeneratorRuntime.awrap(maskDetector.predict(faceTensor).data());\n\n          case 22:\n            result = _context2.sent;\n\n            if (result[0] > result[1]) {\n              color = \"green\";\n            }\n\n            tempArray.push({\n              id: i,\n              location: _faces[i],\n              color: color\n            });\n\n          case 25:\n            i++;\n            _context2.next = 14;\n            break;\n\n          case 28:\n            setFaces(tempArray);\n            _context2.next = 34;\n            break;\n\n          case 31:\n            _context2.prev = 31;\n            _context2.t0 = _context2[\"catch\"](0);\n            console.log(\"[-] Unable to retrieve image\");\n\n          case 34:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, [[0, 31]], Promise);\n  };\n\n  return React.createElement(View, {\n    style: styles.container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 5\n    }\n  }, React.createElement(Input, {\n    placeholder: \"image link\",\n    onChangeText: function onChangeText(inputText) {\n      setImageLink(inputText);\n    },\n    value: imageLink,\n    containerStyle: {\n      height: 40,\n      fontSize: 10,\n      margin: 15\n    },\n    inputContainerStyle: {\n      borderRadius: 10,\n      borderWidth: 1,\n      paddingHorizontal: 5\n    },\n    inputStyle: {\n      fontSize: 15\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }\n  }), React.createElement(View, {\n    style: {\n      marginBottom: 20\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }\n  }, React.createElement(Image, {\n    style: {\n      width: 224,\n      height: 224,\n      borderWidth: 2,\n      borderColor: \"black\",\n      resizeMode: \"contain\"\n    },\n    source: {\n      uri: imageLink\n    },\n    PlaceholderContent: React.createElement(View, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 31\n      }\n    }, \"No Image Found\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 9\n    }\n  }), React.createElement(Svg, {\n    height: \"224\",\n    width: \"224\",\n    style: {\n      marginTop: -224\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 9\n    }\n  }, faces.map(function (face) {\n    return React.createElement(Rect, {\n      key: face.id,\n      x: face.location.topLeft[0],\n      y: face.location.topLeft[1],\n      width: face.location.bottomRight[0] - face.location.topLeft[0],\n      height: face.location.bottomRight[1] - face.location.topLeft[1],\n      stroke: face.color,\n      strokeWidth: \"3\",\n      fill: \"\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 17\n      }\n    });\n  }))), React.createElement(Button, {\n    title: \"Predict\",\n    onPress: function onPress() {\n      getFaces();\n    },\n    disabled: function disabled() {\n      var elements = imageLink.split(\".\");\n\n      if (elements.slice(-1)[0] == \"jpg\" || elements.slice(-1)[0] == \"jpeg\") {\n        return false;\n      } else {\n        return true;\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 9\n    }\n  }));\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center'\n  }\n});","map":{"version":3,"sources":["C:/Users/OHyic/Desktop/react_native/ai-app/App.js"],"names":["React","useState","useEffect","Button","Input","Svg","Rect","tf","fetch","bundleResourceIO","blazeface","jpeg","App","imageLink","setImageLink","faces","setFaces","faceDetector","setFaceDetector","maskDetector","setMaskDetector","console","log","ready","require","modelJson","modelWeight","loadLayersModel","load","imageToTensor","rawImageData","TO_UINT8ARRAY","decode","width","height","data","buffer","Uint8Array","offset","i","length","tensor3d","getFaces","isBinary","response","arrayBuffer","imageTensor","resizeBilinear","estimateFaces","tempArray","color","parseInt","bottomRight","topLeft","faceTensor","slice","reshape","predict","result","push","id","location","styles","container","inputText","fontSize","margin","borderRadius","borderWidth","paddingHorizontal","marginBottom","borderColor","resizeMode","uri","marginTop","map","face","elements","split","StyleSheet","create","flex","backgroundColor","alignItems","justifyContent"],"mappings":"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","sourcesContent":["import React, { useState, useEffect }  from 'react';\nimport { StyleSheet, View,Image } from 'react-native';\nimport { Button, Input } from 'react-native-elements';\nimport Svg, {Rect} from 'react-native-svg';\nimport * as tf from '@tensorflow/tfjs';\nimport { fetch, bundleResourceIO } from '@tensorflow/tfjs-react-native';\nimport * as blazeface from '@tensorflow-models/blazeface';\nimport * as jpeg from 'jpeg-js'\nexport default function App() {\n    const [imageLink,setImageLink] = useState(\"https://raw.githubusercontent.com/ohyicong/masksdetection/master/dataset/without_mask/108.jpg\")\n    const [faces,setFaces]=useState([])\n    const [faceDetector,setFaceDetector]=useState(\"\")\n    const [maskDetector,setMaskDetector]=useState(\"\")\n    useEffect(async () => {\n      console.log(\"[+] Application started\")\n      //Wait for tensorflow module to be ready\n      await tf.ready();\n      console.log(\"[+] Loading custom mask detection model\")\n      //Replce model.json and group1-shard.bin with your own custom model\n      const modelJson = await require(\"./assets/models/model.json\");\n      const modelWeight = await require(\"./assets/models/group1-shard.bin\");\n      const maskDetector = await tf.loadLayersModel(bundleResourceIO(modelJson,modelWeight));\n      console.log(\"[+] Loading pre-trained face detection model\")\n      //Blazeface is a face detection model provided by Google\n      const faceDetector =  await blazeface.load();\n    }, []); \n    function imageToTensor(rawImageData){\n      //Function to convert jpeg image to tensors\n      const TO_UINT8ARRAY = true;\n      const { width, height, data } = jpeg.decode(rawImageData, TO_UINT8ARRAY);\n      // Drop the alpha channel info for mobilenet\n      const buffer = new Uint8Array(width * height * 3);\n      let offset = 0; // offset into original data\n      for (let i = 0; i < buffer.length; i += 3) {\n        buffer[i] = data[offset];\n        buffer[i + 1] = data[offset + 1];\n        buffer[i + 2] = data[offset + 2];\n        offset += 4;\n      }\n      return tf.tensor3d(buffer, [height, width, 3]);\n    }\n    const getFaces = async() => {\n      try{\n        console.log(\"[+] Retrieving image from link :\"+imageLink)\n        const response = await fetch(imageLink, {}, { isBinary: true });\n        const rawImageData = await response.arrayBuffer();\n        const imageTensor = imageToTensor(rawImageData).resizeBilinear([224,224])\n        const faces = await faceDetector.estimateFaces(imageTensor, false);\n        var tempArray=[]\n        //Loop through the available faces, check if the person is wearing a mask. \n        for (let i=0;i<faces.length;i++){\n          let color = \"red\"\n          let width = parseInt((faces[i].bottomRight[1] - faces[i].topLeft[1]))\n          let height = parseInt((faces[i].bottomRight[0] - faces[i].topLeft[0]))\n          let faceTensor=imageTensor.slice([parseInt(faces[i].topLeft[1]),parseInt(faces[i].topLeft[0]),0],[width,height,3])\n          faceTensor = faceTensor.resizeBilinear([224,224]).reshape([1,224,224,3])\n          let result = await maskDetector.predict(faceTensor).data()\n          //if result[0]>result[1], the person is wearing a mask\n          if(result[0]>result[1]){\n            color=\"green\"\n          }\n          tempArray.push({\n            id:i,\n            location:faces[i],\n            color:color\n          })\n        }\n        setFaces(tempArray)\n      }catch{\n        console.log(\"[-] Unable to retrieve image\")\n      }\n      \n    }\n  return (\n    <View style={styles.container}>\n      <Input \n        placeholder=\"image link\"\n        onChangeText = {(inputText)=>{setImageLink(inputText)}}\n        value={imageLink}\n        containerStyle={{height:40,fontSize:10,margin:15}} \n        inputContainerStyle={{borderRadius:10,borderWidth:1,paddingHorizontal:5}}  \n        inputStyle={{fontSize:15}}\n      \n      />\n      <View style={{marginBottom:20}}>\n        <Image\n          style={{width:224,height:224,borderWidth:2,borderColor:\"black\",resizeMode: \"contain\"}}\n          source={{\n            uri: imageLink\n          }}\n          PlaceholderContent={<View>No Image Found</View>}\n        />\n        <Svg height=\"224\" width=\"224\" style={{marginTop:-224}}>\n          {\n            faces.map((face)=>{\n              return (\n                <Rect\n                  key={face.id}\n                  x={face.location.topLeft[0]}\n                  y={face.location.topLeft[1]}\n                  width={(face.location.bottomRight[0] - face.location.topLeft[0])}\n                  height={(face.location.bottomRight[1] - face.location.topLeft[1])}\n                  stroke={face.color}\n                  strokeWidth=\"3\"\n                  fill=\"\"\n                />\n              )\n            })\n          }   \n        </Svg>\n      </View>\n        <Button \n          title=\"Predict\"\n          onPress={()=>{getFaces()}}\n          disabled={\n            ()=>{\n              const elements= imageLink.split(\".\")\n              if(elements.slice(-1)[0]==\"jpg\" || elements.slice(-1)[0]==\"jpeg\"){\n                return false\n              }else{\n                return true\n              }\n            }\n          }\n        />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n});\n"]},"metadata":{},"sourceType":"module"}