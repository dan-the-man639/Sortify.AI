{"ast":null,"code":"import { PermissionStatus } from 'unimodules-permissions-interface';\nexport var CameraType;\n(function (CameraType) {\n  CameraType[\"front\"] = \"front\";\n  CameraType[\"back\"] = \"back\";\n})(CameraType || (CameraType = {}));\nexport var ImageType;\n(function (ImageType) {\n  ImageType[\"png\"] = \"png\";\n  ImageType[\"jpg\"] = \"jpg\";\n})(ImageType || (ImageType = {}));\nexport { PermissionStatus };","map":{"version":3,"names":["PermissionStatus","CameraType","ImageType"],"sources":["/Users/rihong/Documents/Github/SortifyAI/node_modules/expo-camera/src/Camera.types.ts"],"sourcesContent":["import { ViewProps } from 'react-native';\nimport {\n  PermissionResponse,\n  PermissionStatus,\n  PermissionExpiration,\n} from 'unimodules-permissions-interface';\n\nexport enum CameraType {\n  front = 'front',\n  back = 'back',\n}\n\nexport enum ImageType {\n  png = 'png',\n  jpg = 'jpg',\n}\n\nexport type ImageParameters = {\n  imageType: ImageType;\n  quality: number | null;\n};\n\nexport type ImageSize = {\n  width: number;\n  height: number;\n};\n\nexport type WebCameraSettings = Partial<{\n  autoFocus: string;\n  flashMode: string;\n  whiteBalance: string;\n  exposureCompensation: number;\n  colorTemperature: number;\n  iso: number;\n  brightness: number;\n  contrast: number;\n  saturation: number;\n  sharpness: number;\n  focusDistance: number;\n  zoom: number;\n}>;\n\nexport type CapturedPicture = {\n  width: number;\n  height: number;\n  uri: string;\n  base64?: string;\n  // note(bacon): The types are currently only defined for web.\n  exif?: Partial<MediaTrackSettings>;\n};\n\nexport type CameraPictureOptions = {\n  quality?: number;\n  base64?: boolean;\n  exif?: boolean;\n  onPictureSaved?: (picture: CameraCapturedPicture) => void;\n  // TODO(Bacon): Is it possible to implement this in the browser?\n  skipProcessing?: boolean;\n  // Web-only\n  scale?: number;\n  imageType?: ImageType;\n  isImageMirror?: boolean;\n  // internal\n  id?: number;\n  fastMode?: boolean;\n};\n\nexport type CameraRecordingOptions = {\n  maxDuration?: number;\n  maxFileSize?: number;\n  quality?: number | string;\n  mute?: boolean;\n  mirror?: boolean;\n};\n\nexport type CameraCapturedPicture = {\n  width: number;\n  height: number;\n  uri: string;\n  base64?: string;\n  exif?: any;\n};\n\nexport type PictureSavedListener = (event: {\n  nativeEvent: { data: CapturedPicture; id: number };\n}) => void;\n\nexport type CameraReadyListener = () => void;\n\nexport type MountErrorListener = (event: { nativeEvent: CameraMountError }) => void;\n\nexport type CameraMountError = { message: string };\n\nexport type BarCodePoint = {\n  x: number;\n  y: number;\n};\n\nexport type BarCodeScanningResult = {\n  type: string;\n  data: string;\n  /** @platform web */\n  cornerPoints?: BarCodePoint[];\n};\n\nexport type FaceDetectionResult = { faces: any[] };\n\nexport type CameraProps = ViewProps & {\n  zoom?: number;\n  ratio?: string;\n  focusDepth?: number;\n  type?: number | string;\n  onCameraReady?: Function;\n  useCamera2Api?: boolean;\n  flashMode?: number | string;\n  whiteBalance?: number | string;\n  autoFocus?: string | boolean | number;\n  pictureSize?: string;\n  videoStabilizationMode?: number;\n  onMountError?: (event: CameraMountError) => void;\n  barCodeScannerSettings?: object;\n  onBarCodeScanned?: (scanningResult: BarCodeScanningResult) => void;\n  faceDetectorSettings?: object;\n  onFacesDetected?: (faces: FaceDetectionResult) => void;\n};\n\nexport type CameraNativeProps = {\n  pointerEvents?: any;\n  style?: any;\n  ref?: Function;\n  onCameraReady?: CameraReadyListener;\n  onMountError?: MountErrorListener;\n  onBarCodeScanned?: (event: { nativeEvent: BarCodeScanningResult }) => void;\n  onFacesDetected?: (event: { nativeEvent: FaceDetectionResult }) => void;\n  onFaceDetectionError?: (event: { nativeEvent: Error }) => void;\n  onPictureSaved?: PictureSavedListener;\n  type?: number | string;\n  flashMode?: number | string;\n  autoFocus?: string | boolean | number;\n  focusDepth?: number;\n  zoom?: number;\n  whiteBalance?: number | string;\n  pictureSize?: string;\n  barCodeScannerSettings?: BarCodeSettings;\n  faceDetectorSettings?: object;\n  barCodeScannerEnabled?: boolean;\n  faceDetectorEnabled?: boolean;\n  // Android\n  ratio?: string;\n  useCamera2Api?: boolean;\n};\n\nexport type BarCodeSettings = {\n  barCodeTypes: string[];\n  interval?: number;\n};\n\nexport { PermissionResponse, PermissionStatus, PermissionExpiration };\n"],"mappings":"AACA,SAEEA,gBAAgB,QAEX,kCAAkC;AAEzC,WAAYC,UAGX;AAHD,WAAYA,UAAU;EACpBA,UAAA,mBAAe;EACfA,UAAA,iBAAa;AACf,CAAC,EAHWA,UAAU,KAAVA,UAAU;AAKtB,WAAYC,SAGX;AAHD,WAAYA,SAAS;EACnBA,SAAA,eAAW;EACXA,SAAA,eAAW;AACb,CAAC,EAHWA,SAAS,KAATA,SAAS;AAiJrB,SAA6BF,gBAAgB"},"metadata":{},"sourceType":"module","externalDependencies":[]}