{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport { Platform } from '@unimodules/core';\nimport path from 'path-browserify';\nimport PixelRatio from \"react-native-web/dist/exports/PixelRatio\";\nimport URL from 'url-parse';\nimport AssetSourceResolver from \"./AssetSourceResolver\";\nimport { manifestBaseUrl, getManifest } from \"./PlatformUtils\";\nvar assetMapOverride = getManifest().assetMapOverride;\nexport function selectAssetSource(meta) {\n  if (assetMapOverride && assetMapOverride.hasOwnProperty(meta.hash)) {\n    meta = _objectSpread(_objectSpread({}, meta), assetMapOverride[meta.hash]);\n  }\n  var scale = AssetSourceResolver.pickScale(meta.scales, PixelRatio.get());\n  var index = meta.scales.findIndex(function (s) {\n    return s === scale;\n  });\n  var hash = meta.fileHashes ? meta.fileHashes[index] || meta.fileHashes[0] : meta.hash;\n  var uri = meta.fileUris ? meta.fileUris[index] || meta.fileUris[0] : meta.uri;\n  if (uri) {\n    return {\n      uri: resolveUri(uri),\n      hash: hash\n    };\n  }\n  var assetUrlOverride = getManifest().assetUrlOverride;\n  if (assetUrlOverride) {\n    var _uri = path.join(assetUrlOverride, hash);\n    return {\n      uri: resolveUri(_uri),\n      hash: hash\n    };\n  }\n  var fileScale = scale === 1 ? '' : \"@\" + scale + \"x\";\n  var fileExtension = meta.type ? \".\" + encodeURIComponent(meta.type) : '';\n  var suffix = \"/\" + encodeURIComponent(meta.name) + fileScale + fileExtension + \"?platform=\" + encodeURIComponent(Platform.OS) + \"&hash=\" + encodeURIComponent(meta.hash);\n  if (/^https?:\\/\\//.test(meta.httpServerLocation)) {\n    var _uri2 = meta.httpServerLocation + suffix;\n    return {\n      uri: _uri2,\n      hash: hash\n    };\n  }\n  if (getManifest().developer) {\n    var baseUrl = new URL(getManifest().bundleUrl);\n    baseUrl.set('pathname', meta.httpServerLocation + suffix);\n    return {\n      uri: baseUrl.href,\n      hash: hash\n    };\n  }\n  return {\n    uri: \"https://d1wp6m56sqw74a.cloudfront.net/~assets/\" + encodeURIComponent(hash),\n    hash: hash\n  };\n}\nexport function resolveUri(uri) {\n  if (!manifestBaseUrl) {\n    return uri;\n  }\n  var _URL = new URL(uri),\n    protocol = _URL.protocol;\n  if (protocol !== '') {\n    return uri;\n  }\n  var baseUrl = new URL(manifestBaseUrl);\n  var resolvedPath = uri.startsWith('/') ? uri : path.join(baseUrl.pathname, uri);\n  baseUrl.set('pathname', resolvedPath);\n  return baseUrl.href;\n}","map":{"version":3,"names":["Platform","path","PixelRatio","URL","AssetSourceResolver","manifestBaseUrl","getManifest","assetMapOverride","selectAssetSource","meta","hasOwnProperty","hash","_objectSpread","scale","pickScale","scales","get","index","findIndex","s","fileHashes","uri","fileUris","resolveUri","assetUrlOverride","join","fileScale","fileExtension","type","encodeURIComponent","suffix","name","OS","test","httpServerLocation","developer","baseUrl","bundleUrl","set","href","_URL","protocol","resolvedPath","startsWith","pathname"],"sources":["/Users/rihong/Documents/Github/SortifyAI/node_modules/expo-asset/src/AssetSources.ts"],"sourcesContent":["import { Platform } from '@unimodules/core';\nimport path from 'path-browserify';\nimport { PixelRatio } from 'react-native';\nimport URL from 'url-parse';\nimport AssetSourceResolver from './AssetSourceResolver';\n\nimport { manifestBaseUrl, getManifest } from './PlatformUtils';\n\nexport type AssetMetadata = {\n  hash: string;\n  name: string;\n  type: string;\n  width?: number;\n  height?: number;\n  scales: number[];\n  httpServerLocation: string;\n  uri?: string;\n  fileHashes?: string[];\n  fileUris?: string[];\n};\n\nexport type AssetSource = {\n  uri: string;\n  hash: string;\n};\n\n// Fast lookup check if asset map has any overrides in the manifest\nconst assetMapOverride = getManifest().assetMapOverride;\n\n/**\n * Selects the best file for the given asset (ex: choosing the best scale for images) and returns\n * a { uri, hash } pair for the specific asset file.\n *\n * If the asset isn't an image with multiple scales, the first file is selected.\n */\nexport function selectAssetSource(meta: AssetMetadata): AssetSource {\n  // Override with the asset map in manifest if available\n  if (assetMapOverride && assetMapOverride.hasOwnProperty(meta.hash)) {\n    meta = { ...meta, ...assetMapOverride[meta.hash] };\n  }\n\n  // This logic is based on that of AssetSourceResolver, with additional support for file hashes and\n  // explicitly provided URIs\n  const scale = AssetSourceResolver.pickScale(meta.scales, PixelRatio.get());\n  const index = meta.scales.findIndex(s => s === scale);\n  const hash = meta.fileHashes ? meta.fileHashes[index] || meta.fileHashes[0] : meta.hash;\n\n  // Allow asset processors to directly provide the URL to load\n  const uri = meta.fileUris ? meta.fileUris[index] || meta.fileUris[0] : meta.uri;\n  if (uri) {\n    return { uri: resolveUri(uri), hash };\n  }\n\n  // Check if the assetUrl was overridden in the manifest\n  const assetUrlOverride = getManifest().assetUrlOverride;\n  if (assetUrlOverride) {\n    const uri = path.join(assetUrlOverride, hash);\n    return { uri: resolveUri(uri), hash };\n  }\n\n  const fileScale = scale === 1 ? '' : `@${scale}x`;\n  const fileExtension = meta.type ? `.${encodeURIComponent(meta.type)}` : '';\n  const suffix = `/${encodeURIComponent(\n    meta.name\n  )}${fileScale}${fileExtension}?platform=${encodeURIComponent(\n    Platform.OS\n  )}&hash=${encodeURIComponent(meta.hash)}`;\n\n  // For assets with a specified absolute URL, we use the existing origin instead of prepending the\n  // development server or production CDN URL origin\n  if (/^https?:\\/\\//.test(meta.httpServerLocation)) {\n    const uri = meta.httpServerLocation + suffix;\n    return { uri, hash };\n  }\n\n  // For assets during development, we use the development server's URL origin\n  if (getManifest().developer) {\n    const baseUrl = new URL(getManifest().bundleUrl);\n    baseUrl.set('pathname', meta.httpServerLocation + suffix);\n    return { uri: baseUrl.href, hash };\n  }\n\n  // Production CDN URIs are based on each asset file hash\n  return {\n    uri: `https://d1wp6m56sqw74a.cloudfront.net/~assets/${encodeURIComponent(hash)}`,\n    hash,\n  };\n}\n\n/**\n * Resolves the given URI to an absolute URI. If the given URI is already an absolute URI, it is\n * simply returned. Otherwise, if it is a relative URI, it is resolved relative to the manifest's\n * base URI.\n */\nexport function resolveUri(uri: string): string {\n  if (!manifestBaseUrl) {\n    return uri;\n  }\n\n  const { protocol } = new URL(uri);\n  if (protocol !== '') {\n    return uri;\n  }\n\n  const baseUrl = new URL(manifestBaseUrl);\n  const resolvedPath = uri.startsWith('/') ? uri : path.join(baseUrl.pathname, uri);\n  baseUrl.set('pathname', resolvedPath);\n  return baseUrl.href;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}